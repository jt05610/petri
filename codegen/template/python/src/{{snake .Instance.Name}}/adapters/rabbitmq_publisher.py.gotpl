import json
import logging
from dataclasses import asdict
from typing import Callable, Dict, Type

import pika

from {{snake .Instance.Name}} import config
from {{snake .Instance.Name}}.domain import events

logger = logging.getLogger(__name__)

connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        virtual_host=config.RABBITMQ_VHOST,
        host=config.RABBITMQ_HOST,
        credentials=pika.PlainCredentials(
            username=config.RABBITMQ_USER,
            password=config.RABBITMQ_PASSWORD
        )
    )
)

channel = connection.channel()

channel.exchange_declare(exchange=config.AMQP_EXCHANGE, exchange_type='topic')

ROUTES: Dict[Type[events.Event], Callable[[events.Event], str]] = {
    events.DeviceRetrieved: lambda e: f"{config.INSTANCE_ID}.device.{e}",
    events.StateRetrieved: lambda e: f"{config.INSTANCE_ID}.state.{e}",
}

def routing_key(event: events.Event) -> str:
    return ROUTES[type(event)](event)


def publish(event: events.Event):
    channel.basic_publish(
        exchange=config.AMQP_EXCHANGE, routing_key=routing_key(event),
        body=json.dumps(asdict(event)).encode('utf-8'))

    logging.info(f"Publishing event {event}")
