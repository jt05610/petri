import json
import logging

import pika

from {{snake .Instance.Name}} import config, bootstrap
from {{snake .Instance.Name}}.domain import commands
from {{snake .Instance.Name}}.service_layer.handlers import COMMAND_HANDLERS
from {{snake .Instance.Name}}.service_layer.messagebus import MessageBus



logger = logging.getLogger(__name__)

logger.setLevel(logging.DEBUG)

connection = pika.BlockingConnection(
    pika.ConnectionParameters(
        virtual_host=config.RABBITMQ_VHOST,
        host=config.RABBITMQ_HOST,
        credentials=pika.PlainCredentials(
            username=config.RABBITMQ_USER,
            password=config.RABBITMQ_PASSWORD
        )
    )
)

channel = connection.channel()

channel.exchange_declare(exchange=config.AMQP_EXCHANGE, exchange_type='topic')

queue = channel.queue_declare(queue='', exclusive=True)

def handle_devices(bus: MessageBus):
    def handle(name: str, data: bytes):
        cmd = commands.GetDevice()
        bus.handle(cmd)

    return handle


def handle_state(bus: MessageBus):
    def handle(name: str, data: bytes):
        cmd = commands.GetState()
        bus.handle(cmd)

    return handle


COMMANDS = {
{{range .Device.Events}}    "{{snake .Name}}": commands.{{pascalFromSnake .Name}},
{{end}}
}


def handle_commands(bus: MessageBus):
    def handle(name: str, data: bytes):
        cmd = COMMANDS[name](**json.loads(data))
        bus.handle(cmd)

    return handle



def main():
    logger.info('Starting RabbitMQ consumer')
    bus = bootstrap.bootstrap()
    for key in COMMAND_HANDLERS.keys():
        channel.queue_bind(
            exchange=config.AMQP_EXCHANGE,
            queue=queue.method.queue,
            routing_key=f"{config.INSTANCE_ID}.commands.{key}"
        )
    channel.queue_bind(
        exchange=config.AMQP_EXCHANGE,
        queue=queue.method.queue,
        routing_key=f"devices"
    )
    channel.queue_bind(
        exchange=config.AMQP_EXCHANGE,
        queue=queue.method.queue,
        routing_key=f"{config.INSTANCE_ID}.state.get"
    )

    handlers = {
        "devices": handle_devices(bus),
        "state": handle_state(bus),
        "commands": handle_commands(bus),
    }

    def callback(ch, method, properties: pika.BasicProperties, body):
        if method.routing_key == "devices":
            logger.debug(f"Received message {body}")
            return handlers[key](method.routing_key, body)

        logger.debug(f"Received message {body}")
        split = method.routing_key.split(".")
        topic = split[1]
        k = split[2]
        if topic == "state":
            return handlers[topic](method.routing_key, body)
        if topic == "commands":
            return handlers[topic](k, body)
        logger.error(f"Unknown topic {topic}")
        return


    logger.info('Waiting for messages')

    channel.basic_consume(
        queue=queue.method.queue,
        on_message_callback=callback,
        auto_ack=True
    )

    channel.start_consuming()


if __name__ == '__main__':
    main()
