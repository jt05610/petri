from typing import Callable

from {{snake .Instance.Name}}.domain import commands, events
from {{snake .Instance.Name}}.service_layer import unit_of_work


{{range .Device.Events}}
def {{snake .Name}}(
        cmd: commands.{{pascalFromSnake .Name}},
        uow: unit_of_work.AbstractUnitOfWork,
):
    with uow:
        uow.do(cmd)


def publish_{{snake .Name}}(
        event: events.{{pascalFromSnake .Name}},
        publish: Callable
):
    publish(event)

{{end}}


def get_device(
        cmd: commands.GetDevice,
        uow: unit_of_work.AbstractUnitOfWork,
):
    with uow:
        uow.do(cmd)


def get_state(
        cmd: commands.GetState,
        uow: unit_of_work.AbstractUnitOfWork,
):
    with uow:
        uow.do(cmd)


def publish_state_retrieved(
        event: events.StateRetrieved,
        publish: Callable
):
    publish(event)


def publish_device_retrieved(
        event: events.DeviceRetrieved,
        publish: Callable
):
    publish(event)


EVENT_HANDLERS = {
    {{range .Device.Events}}
    events.{{pascalFromSnake .Name}}: [
        publish_{{snake .Name}},
    ],
    {{end}}
    events.StateRetrieved: [
        publish_state_retrieved,
    ],
    events.DeviceRetrieved: [
        publish_device_retrieved,
    ],
}

COMMAND_HANDLERS = {
    {{range .Device.Events}}
    commands.{{pascalFromSnake .Name}}: {{snake .Name}},
    {{end}}
    commands.GetDevice: get_device,
    commands.GetState: get_state,
}
