from __future__ import annotations
import abc
import threading
from typing import Callable, Dict, Type

import serial

from {{snake .Instance.Name}} import config
from {{snake .Instance.Name}}.domain import commands
from {{snake .Instance.Name}}.domain.model import {{pascalFromSnake .Instance.Name}}

{{$instanceName := pascalFromSnake .Instance.Name}}
class AbstractUnitOfWork(abc.ABC):
    {{snake .Instance.Name}}: {{pascalFromSnake .Instance.Name}}
    mutex = threading.Lock()
    handlers: Dict[Type[commands.Command], Callable] = {
        {{range .Device.Events}}
        commands.{{pascalFromSnake .Name}}: {{$instanceName}}.{{snake .Name}},
        {{end}}
        commands.GetDevice: {{$instanceName}}.get_device,
        commands.GetState: {{$instanceName}}.get_state,
    }

    def __enter__(self) -> AbstractUnitOfWork:
        self.mutex.acquire()
        return self

    def __exit__(self, *args):
        self.mutex.release()
        return

    def collect_new_events(self):
        while self.{{snake .Instance.Name}}.events:
            yield self.{{snake .Instance.Name}}.events.pop(0)

    def _do(self, cmd: commands.Command):
        raise NotImplementedError

    def do(self, cmd: commands.Command):
        if type(cmd) in [{{range .Device.Events}}commands.{{pascalFromSnake .Name}}, {{end}}]:
            self._do(cmd)

        self.handlers[type(cmd)](self.{{snake .Instance.Name}})


class GRBLUnitOfWork(AbstractUnitOfWork):
    MSG: Dict[Type[commands.Command], str] = {
    {{ range .Device.Events}}
        commands.{{pascalFromSnake .Name}}: config.{{pascalFromSnake .Name}}_COMMAND,
    {{end}}
    }
    port: serial.Serial

    def __init__(self, {{snake .Instance.Name}}: {{pascalFromSnake .Instance.Name}}, ser: str,
                 baud: int = 115200,
                 timeout: int = 1):
        self.{{snake .Instance.Name}} = {{snake .Instance.Name}}
        self.port = serial.Serial(ser, baudrate=baud, timeout=timeout)

    def write(self, cmd: commands.Command):
        msg = self.MSG[type(cmd)] + "\n"
        self.port.write(msg.encode('utf-8'))

    def read(self):
        return self.port.readline().decode('utf-8').strip()

    def _do(self, cmd: commands.Command):
        self.write(cmd)
        ret = self.read()
        if ret != "ok":
            raise Exception(f"GRBL returned {ret}")
