// messages we need to send

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: grbl.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GRBL_Home_FullMethodName        = "/GRBL/Home"
	GRBL_StateStream_FullMethodName = "/GRBL/StateStream"
	GRBL_Move_FullMethodName        = "/GRBL/Move"
	GRBL_SpindleOn_FullMethodName   = "/GRBL/SpindleOn"
	GRBL_SpindleOff_FullMethodName  = "/GRBL/SpindleOff"
	GRBL_MistOn_FullMethodName      = "/GRBL/MistOn"
	GRBL_FloodOn_FullMethodName     = "/GRBL/FloodOn"
	GRBL_CoolantOff_FullMethodName  = "/GRBL/CoolantOff"
)

// GRBLClient is the client API for GRBL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRBLClient interface {
	Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*Response, error)
	StateStream(ctx context.Context, in *StateStreamRequest, opts ...grpc.CallOption) (GRBL_StateStreamClient, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*Response, error)
	SpindleOn(ctx context.Context, in *SpindleOnRequest, opts ...grpc.CallOption) (*Response, error)
	SpindleOff(ctx context.Context, in *SpindleOffRequest, opts ...grpc.CallOption) (*Response, error)
	MistOn(ctx context.Context, in *MistOnRequest, opts ...grpc.CallOption) (*Response, error)
	FloodOn(ctx context.Context, in *FloodOnRequest, opts ...grpc.CallOption) (*Response, error)
	CoolantOff(ctx context.Context, in *CoolantOffRequest, opts ...grpc.CallOption) (*Response, error)
}

type gRBLClient struct {
	cc grpc.ClientConnInterface
}

func NewGRBLClient(cc grpc.ClientConnInterface) GRBLClient {
	return &gRBLClient{cc}
}

func (c *gRBLClient) Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GRBL_Home_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRBLClient) StateStream(ctx context.Context, in *StateStreamRequest, opts ...grpc.CallOption) (GRBL_StateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRBL_ServiceDesc.Streams[0], GRBL_StateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gRBLStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRBL_StateStreamClient interface {
	Recv() (*StateStreamResponse, error)
	grpc.ClientStream
}

type gRBLStateStreamClient struct {
	grpc.ClientStream
}

func (x *gRBLStateStreamClient) Recv() (*StateStreamResponse, error) {
	m := new(StateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRBLClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GRBL_Move_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRBLClient) SpindleOn(ctx context.Context, in *SpindleOnRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GRBL_SpindleOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRBLClient) SpindleOff(ctx context.Context, in *SpindleOffRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GRBL_SpindleOff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRBLClient) MistOn(ctx context.Context, in *MistOnRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GRBL_MistOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRBLClient) FloodOn(ctx context.Context, in *FloodOnRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GRBL_FloodOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRBLClient) CoolantOff(ctx context.Context, in *CoolantOffRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, GRBL_CoolantOff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRBLServer is the server API for GRBL service.
// All implementations must embed UnimplementedGRBLServer
// for forward compatibility
type GRBLServer interface {
	Home(context.Context, *HomeRequest) (*Response, error)
	StateStream(*StateStreamRequest, GRBL_StateStreamServer) error
	Move(context.Context, *MoveRequest) (*Response, error)
	SpindleOn(context.Context, *SpindleOnRequest) (*Response, error)
	SpindleOff(context.Context, *SpindleOffRequest) (*Response, error)
	MistOn(context.Context, *MistOnRequest) (*Response, error)
	FloodOn(context.Context, *FloodOnRequest) (*Response, error)
	CoolantOff(context.Context, *CoolantOffRequest) (*Response, error)
	mustEmbedUnimplementedGRBLServer()
}

// UnimplementedGRBLServer must be embedded to have forward compatible implementations.
type UnimplementedGRBLServer struct {
}

func (UnimplementedGRBLServer) Home(context.Context, *HomeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (UnimplementedGRBLServer) StateStream(*StateStreamRequest, GRBL_StateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StateStream not implemented")
}
func (UnimplementedGRBLServer) Move(context.Context, *MoveRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedGRBLServer) SpindleOn(context.Context, *SpindleOnRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpindleOn not implemented")
}
func (UnimplementedGRBLServer) SpindleOff(context.Context, *SpindleOffRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpindleOff not implemented")
}
func (UnimplementedGRBLServer) MistOn(context.Context, *MistOnRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MistOn not implemented")
}
func (UnimplementedGRBLServer) FloodOn(context.Context, *FloodOnRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FloodOn not implemented")
}
func (UnimplementedGRBLServer) CoolantOff(context.Context, *CoolantOffRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoolantOff not implemented")
}
func (UnimplementedGRBLServer) mustEmbedUnimplementedGRBLServer() {}

// UnsafeGRBLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRBLServer will
// result in compilation errors.
type UnsafeGRBLServer interface {
	mustEmbedUnimplementedGRBLServer()
}

func RegisterGRBLServer(s grpc.ServiceRegistrar, srv GRBLServer) {
	s.RegisterService(&GRBL_ServiceDesc, srv)
}

func _GRBL_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRBLServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRBL_Home_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRBLServer).Home(ctx, req.(*HomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRBL_StateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRBLServer).StateStream(m, &gRBLStateStreamServer{stream})
}

type GRBL_StateStreamServer interface {
	Send(*StateStreamResponse) error
	grpc.ServerStream
}

type gRBLStateStreamServer struct {
	grpc.ServerStream
}

func (x *gRBLStateStreamServer) Send(m *StateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GRBL_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRBLServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRBL_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRBLServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRBL_SpindleOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpindleOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRBLServer).SpindleOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRBL_SpindleOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRBLServer).SpindleOn(ctx, req.(*SpindleOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRBL_SpindleOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpindleOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRBLServer).SpindleOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRBL_SpindleOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRBLServer).SpindleOff(ctx, req.(*SpindleOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRBL_MistOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MistOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRBLServer).MistOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRBL_MistOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRBLServer).MistOn(ctx, req.(*MistOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRBL_FloodOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FloodOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRBLServer).FloodOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRBL_FloodOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRBLServer).FloodOn(ctx, req.(*FloodOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRBL_CoolantOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoolantOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRBLServer).CoolantOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GRBL_CoolantOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRBLServer).CoolantOff(ctx, req.(*CoolantOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRBL_ServiceDesc is the grpc.ServiceDesc for GRBL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRBL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GRBL",
	HandlerType: (*GRBLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Home",
			Handler:    _GRBL_Home_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _GRBL_Move_Handler,
		},
		{
			MethodName: "SpindleOn",
			Handler:    _GRBL_SpindleOn_Handler,
		},
		{
			MethodName: "SpindleOff",
			Handler:    _GRBL_SpindleOff_Handler,
		},
		{
			MethodName: "MistOn",
			Handler:    _GRBL_MistOn_Handler,
		},
		{
			MethodName: "FloodOn",
			Handler:    _GRBL_FloodOn_Handler,
		},
		{
			MethodName: "CoolantOff",
			Handler:    _GRBL_CoolantOff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StateStream",
			Handler:       _GRBL_StateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grbl.proto",
}
