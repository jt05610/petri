// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: autosampler/proto/autosampler.proto

package autosampler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Autosampler_Inject_FullMethodName = "/autosampler.Autosampler/Inject"
)

// AutosamplerClient is the client API for Autosampler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutosamplerClient interface {
	Inject(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (Autosampler_InjectClient, error)
}

type autosamplerClient struct {
	cc grpc.ClientConnInterface
}

func NewAutosamplerClient(cc grpc.ClientConnInterface) AutosamplerClient {
	return &autosamplerClient{cc}
}

func (c *autosamplerClient) Inject(ctx context.Context, in *InjectRequest, opts ...grpc.CallOption) (Autosampler_InjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Autosampler_ServiceDesc.Streams[0], Autosampler_Inject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &autosamplerInjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Autosampler_InjectClient interface {
	Recv() (*InjectResponse, error)
	grpc.ClientStream
}

type autosamplerInjectClient struct {
	grpc.ClientStream
}

func (x *autosamplerInjectClient) Recv() (*InjectResponse, error) {
	m := new(InjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AutosamplerServer is the server API for Autosampler service.
// All implementations must embed UnimplementedAutosamplerServer
// for forward compatibility
type AutosamplerServer interface {
	Inject(*InjectRequest, Autosampler_InjectServer) error
	mustEmbedUnimplementedAutosamplerServer()
}

// UnimplementedAutosamplerServer must be embedded to have forward compatible implementations.
type UnimplementedAutosamplerServer struct {
}

func (UnimplementedAutosamplerServer) Inject(*InjectRequest, Autosampler_InjectServer) error {
	return status.Errorf(codes.Unimplemented, "method Inject not implemented")
}
func (UnimplementedAutosamplerServer) mustEmbedUnimplementedAutosamplerServer() {}

// UnsafeAutosamplerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutosamplerServer will
// result in compilation errors.
type UnsafeAutosamplerServer interface {
	mustEmbedUnimplementedAutosamplerServer()
}

func RegisterAutosamplerServer(s grpc.ServiceRegistrar, srv AutosamplerServer) {
	s.RegisterService(&Autosampler_ServiceDesc, srv)
}

func _Autosampler_Inject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AutosamplerServer).Inject(m, &autosamplerInjectServer{stream})
}

type Autosampler_InjectServer interface {
	Send(*InjectResponse) error
	grpc.ServerStream
}

type autosamplerInjectServer struct {
	grpc.ServerStream
}

func (x *autosamplerInjectServer) Send(m *InjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Autosampler_ServiceDesc is the grpc.ServiceDesc for Autosampler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Autosampler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "autosampler.Autosampler",
	HandlerType: (*AutosamplerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Inject",
			Handler:       _Autosampler_Inject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "autosampler/proto/autosampler.proto",
}
