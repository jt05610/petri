// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: v1/valve.proto

package valve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValveServiceClient is the client API for ValveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValveServiceClient interface {
	GetState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ValveStateResponse, error)
	Control(ctx context.Context, opts ...grpc.CallOption) (ValveService_ControlClient, error)
}

type valveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValveServiceClient(cc grpc.ClientConnInterface) ValveServiceClient {
	return &valveServiceClient{cc}
}

func (c *valveServiceClient) GetState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ValveStateResponse, error) {
	out := new(ValveStateResponse)
	err := c.cc.Invoke(ctx, "/valve.ValveService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *valveServiceClient) Control(ctx context.Context, opts ...grpc.CallOption) (ValveService_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValveService_ServiceDesc.Streams[0], "/valve.ValveService/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &valveServiceControlClient{stream}
	return x, nil
}

type ValveService_ControlClient interface {
	Send(*ValveCommand) error
	Recv() (*ValveEvent, error)
	grpc.ClientStream
}

type valveServiceControlClient struct {
	grpc.ClientStream
}

func (x *valveServiceControlClient) Send(m *ValveCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *valveServiceControlClient) Recv() (*ValveEvent, error) {
	m := new(ValveEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValveServiceServer is the server API for ValveService service.
// All implementations must embed UnimplementedValveServiceServer
// for forward compatibility
type ValveServiceServer interface {
	GetState(context.Context, *emptypb.Empty) (*ValveStateResponse, error)
	Control(ValveService_ControlServer) error
	mustEmbedUnimplementedValveServiceServer()
}

// UnimplementedValveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedValveServiceServer struct {
}

func (UnimplementedValveServiceServer) GetState(context.Context, *emptypb.Empty) (*ValveStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedValveServiceServer) Control(ValveService_ControlServer) error {
	return status.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedValveServiceServer) mustEmbedUnimplementedValveServiceServer() {}

// UnsafeValveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValveServiceServer will
// result in compilation errors.
type UnsafeValveServiceServer interface {
	mustEmbedUnimplementedValveServiceServer()
}

func RegisterValveServiceServer(s grpc.ServiceRegistrar, srv ValveServiceServer) {
	s.RegisterService(&ValveService_ServiceDesc, srv)
}

func _ValveService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValveServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/valve.ValveService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValveServiceServer).GetState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValveService_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValveServiceServer).Control(&valveServiceControlServer{stream})
}

type ValveService_ControlServer interface {
	Send(*ValveEvent) error
	Recv() (*ValveCommand, error)
	grpc.ServerStream
}

type valveServiceControlServer struct {
	grpc.ServerStream
}

func (x *valveServiceControlServer) Send(m *ValveEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *valveServiceControlServer) Recv() (*ValveCommand, error) {
	m := new(ValveCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValveService_ServiceDesc is the grpc.ServiceDesc for ValveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "valve.ValveService",
	HandlerType: (*ValveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _ValveService_GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _ValveService_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/valve.proto",
}
