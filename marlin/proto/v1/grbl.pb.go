// messages we need to send

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: grbl.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Peripheral int32

const (
	Peripheral_None    Peripheral = 0
	Peripheral_Spindle Peripheral = 1
	Peripheral_Mist    Peripheral = 2
	Peripheral_Flood   Peripheral = 3
)

// Enum value maps for Peripheral.
var (
	Peripheral_name = map[int32]string{
		0: "None",
		1: "Spindle",
		2: "Mist",
		3: "Flood",
	}
	Peripheral_value = map[string]int32{
		"None":    0,
		"Spindle": 1,
		"Mist":    2,
		"Flood":   3,
	}
)

func (x Peripheral) Enum() *Peripheral {
	p := new(Peripheral)
	*p = x
	return p
}

func (x Peripheral) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Peripheral) Descriptor() protoreflect.EnumDescriptor {
	return file_grbl_proto_enumTypes[0].Descriptor()
}

func (Peripheral) Type() protoreflect.EnumType {
	return &file_grbl_proto_enumTypes[0]
}

func (x Peripheral) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Peripheral.Descriptor instead.
func (Peripheral) EnumDescriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{0}
}

type AlarmCode int32

const (
	AlarmCode_AlarmCode_NoAlarm     AlarmCode = 0 // No alarm
	AlarmCode_AlarmCode_HardLimit   AlarmCode = 1 // Hard limit has been triggered. Machine position is likely lost due to sudden halt. Re-homing is highly recommended.
	AlarmCode_AlarmCode_SoftLimit   AlarmCode = 2 // Soft limit alarm. G-code motion target exceeds machine travel. Machine position retained. Alarm may be safely unlocked.
	AlarmCode_AlarmCode_Abort       AlarmCode = 3 // Reset while in motion. Machine position is likely lost due to sudden halt. Re-homing is highly recommended. May be due to issuing g-code commands that exceed the limit of the machine.
	AlarmCode_AlarmCode_ProbeFail   AlarmCode = 4 // Probe fail. The probe is not in the expected initial state before starting probe cycle when G38.2 and G38.3 is not triggered, and G38.4 and G38.5 is triggered. Your bit is likely making contact with the touch plate or the circuit is completed before the bit is moving. Move the bit away from the touch plate.
	AlarmCode_AlarmCode_ProbeFail2  AlarmCode = 5 // Probe fail. The probe did not contact the workpiece within the programmed travel for G38.2 and G38.4. Your bit is too far away from the touch plate. Move the bit closer, it should be within 6-12mm (1/4 -1/2in) away.
	AlarmCode_AlarmCode_HomingFail  AlarmCode = 6 // Homing fail. The active homing cycle was reset.
	AlarmCode_AlarmCode_HomingFail2 AlarmCode = 7 // Homing fail. Safety door was opened during homing cycle.
	AlarmCode_AlarmCode_HomingFail3 AlarmCode = 8 // Homing fail. Pull off travel failed to clear limit switch. The machine is within the limit switches range when it tries to move away. Try increasing pull-off setting or check wiring.
	AlarmCode_AlarmCode_HomingFail4 AlarmCode = 9 // Homing fail. Could not find limit switch within search distances. Try increasing max travel, decreasing pull-off distance, or check wiring. The limit switch wasn’t triggered in the distances expected. If your z-axis is moving away from the switch when homing, check your firmware and confirm you have the correct profile for your machine.
)

// Enum value maps for AlarmCode.
var (
	AlarmCode_name = map[int32]string{
		0: "AlarmCode_NoAlarm",
		1: "AlarmCode_HardLimit",
		2: "AlarmCode_SoftLimit",
		3: "AlarmCode_Abort",
		4: "AlarmCode_ProbeFail",
		5: "AlarmCode_ProbeFail2",
		6: "AlarmCode_HomingFail",
		7: "AlarmCode_HomingFail2",
		8: "AlarmCode_HomingFail3",
		9: "AlarmCode_HomingFail4",
	}
	AlarmCode_value = map[string]int32{
		"AlarmCode_NoAlarm":     0,
		"AlarmCode_HardLimit":   1,
		"AlarmCode_SoftLimit":   2,
		"AlarmCode_Abort":       3,
		"AlarmCode_ProbeFail":   4,
		"AlarmCode_ProbeFail2":  5,
		"AlarmCode_HomingFail":  6,
		"AlarmCode_HomingFail2": 7,
		"AlarmCode_HomingFail3": 8,
		"AlarmCode_HomingFail4": 9,
	}
)

func (x AlarmCode) Enum() *AlarmCode {
	p := new(AlarmCode)
	*p = x
	return p
}

func (x AlarmCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmCode) Descriptor() protoreflect.EnumDescriptor {
	return file_grbl_proto_enumTypes[1].Descriptor()
}

func (AlarmCode) Type() protoreflect.EnumType {
	return &file_grbl_proto_enumTypes[1]
}

func (x AlarmCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmCode.Descriptor instead.
func (AlarmCode) EnumDescriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{1}
}

type ErrorCode int32

const (
	ErrorCode_ErrorCode_NoError                 ErrorCode = 0  // No error
	ErrorCode_ErrorCode_ExpectedCommandLetter   ErrorCode = 1  // G-code words consist of a letter and a value. Letter was not found.
	ErrorCode_ErrorCode_BadNumberFormat         ErrorCode = 2  // Missing the expected G-code word value or numeric value format is not valid.
	ErrorCode_ErrorCode_InvalidStatement        ErrorCode = 3  // Grbl ‘$’ system command was not recognized or supported.
	ErrorCode_ErrorCode_NegativeValue           ErrorCode = 4  // Negative value received for expected positive value.
	ErrorCode_ErrorCode_HomingCycleFailure      ErrorCode = 5  // Homing cycle failure due to homing not enabled in settings.
	ErrorCode_ErrorCode_MinStepPulseTime        ErrorCode = 6  // Minimum step pulse time less than 3μsec.
	ErrorCode_ErrorCode_EEPROMReadFailure       ErrorCode = 7  // An EEPROM read failed. Default values are used instead.
	ErrorCode_ErrorCode_NotIdle                 ErrorCode = 8  // Grbl ‘$’ command cannot be used unless Grbl is idle.
	ErrorCode_ErrorCode_GCodeLock               ErrorCode = 9  // G-code commands are locked out during alarm or jog state.
	ErrorCode_ErrorCode_HomingNotEnabled        ErrorCode = 10 // Soft limits cannot be enabled without also enabling homing.
	ErrorCode_ErrorCode_LineOverflow            ErrorCode = 11 // The maximum character limit per line exceeded. The received command line was not executed.
	ErrorCode_ErrorCode_MaxStepRateExceeded     ErrorCode = 12 // Grbl ‘$’ setting value causing the step rate to exceed the maximum supported.
	ErrorCode_ErrorCode_SafetyDoorDetected      ErrorCode = 13 // Safety door detected as opened and door state initiated.
	ErrorCode_ErrorCode_LineLengthLimitExceeded ErrorCode = 14 // Build info or startup line exceeded EEPROM line length limit. Line not stored.
	ErrorCode_ErrorCode_TravelExceeded          ErrorCode = 15 // Jog target exceeds machine travel. Jog command is ignored.
	ErrorCode_ErrorCode_InvalidJogCommand       ErrorCode = 16 // Jog command has no ‘=’ or contains prohibited g-code.
	ErrorCode_ErrorCode_LaserModeRequiresPWM    ErrorCode = 17 // Laser mode requires PWM output.
	ErrorCode_ErrorCode_UnsupportedCommand      ErrorCode = 20 // Unsupported or invalid G-code command found.
	ErrorCode_ErrorCode_ModalGroupViolation     ErrorCode = 21 // More than one G-code command from same modal group found in block.
	ErrorCode_ErrorCode_UndefinedFeedRate       ErrorCode = 22 // Feed rate has not yet been set or is undefined.
	ErrorCode_ErrorCode_InvalidGCode23          ErrorCode = 23 // G-code command in block requires an integer value.
	ErrorCode_ErrorCode_InvalidGCode24          ErrorCode = 24 // More than one G-code command that requires axis words found in block.
	ErrorCode_ErrorCode_InvalidGCode25          ErrorCode = 25 // Repeated G-code word found in block.
	ErrorCode_ErrorCode_InvalidGCode26          ErrorCode = 26 // No axis words found in block for G-code command or current modal state which requires them.
	ErrorCode_ErrorCode_InvalidGCode27          ErrorCode = 27 // Line number value is invalid.
	ErrorCode_ErrorCode_InvalidGCode28          ErrorCode = 28 // G-code command is missing a required value word.
	ErrorCode_ErrorCode_InvalidGCode29          ErrorCode = 29 // G59.x work coordinate systems are not supported.
	ErrorCode_ErrorCode_InvalidGCode30          ErrorCode = 30 // G53 only allowed with G0 and G1 motion modes.
	ErrorCode_ErrorCode_InvalidGCode31          ErrorCode = 31 // Axis words found in block when no command or current modal state uses them.
	ErrorCode_ErrorCode_InvalidGCode32          ErrorCode = 32 // G2 and G3 arcs require at least one in-plane axis word.
	ErrorCode_ErrorCode_InvalidGCode33          ErrorCode = 33 // Motion command target is invalid.
	ErrorCode_ErrorCode_InvalidGCode34          ErrorCode = 34 // Arc radius value is invalid.
	ErrorCode_ErrorCode_InvalidGCode35          ErrorCode = 35 // G2 and G3 arcs require at least one in-plane offset word.
	ErrorCode_ErrorCode_InvalidGCode36          ErrorCode = 36 // Unused value words found in block.
	ErrorCode_ErrorCode_InvalidGCode37          ErrorCode = 37 // G43.1 dynamic tool length offset is not assigned to the configured tool length axis.
	ErrorCode_ErrorCode_InvalidGCode38          ErrorCode = 38 // Tool number is greater than the maximum supported value.
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ErrorCode_NoError",
		1:  "ErrorCode_ExpectedCommandLetter",
		2:  "ErrorCode_BadNumberFormat",
		3:  "ErrorCode_InvalidStatement",
		4:  "ErrorCode_NegativeValue",
		5:  "ErrorCode_HomingCycleFailure",
		6:  "ErrorCode_MinStepPulseTime",
		7:  "ErrorCode_EEPROMReadFailure",
		8:  "ErrorCode_NotIdle",
		9:  "ErrorCode_GCodeLock",
		10: "ErrorCode_HomingNotEnabled",
		11: "ErrorCode_LineOverflow",
		12: "ErrorCode_MaxStepRateExceeded",
		13: "ErrorCode_SafetyDoorDetected",
		14: "ErrorCode_LineLengthLimitExceeded",
		15: "ErrorCode_TravelExceeded",
		16: "ErrorCode_InvalidJogCommand",
		17: "ErrorCode_LaserModeRequiresPWM",
		20: "ErrorCode_UnsupportedCommand",
		21: "ErrorCode_ModalGroupViolation",
		22: "ErrorCode_UndefinedFeedRate",
		23: "ErrorCode_InvalidGCode23",
		24: "ErrorCode_InvalidGCode24",
		25: "ErrorCode_InvalidGCode25",
		26: "ErrorCode_InvalidGCode26",
		27: "ErrorCode_InvalidGCode27",
		28: "ErrorCode_InvalidGCode28",
		29: "ErrorCode_InvalidGCode29",
		30: "ErrorCode_InvalidGCode30",
		31: "ErrorCode_InvalidGCode31",
		32: "ErrorCode_InvalidGCode32",
		33: "ErrorCode_InvalidGCode33",
		34: "ErrorCode_InvalidGCode34",
		35: "ErrorCode_InvalidGCode35",
		36: "ErrorCode_InvalidGCode36",
		37: "ErrorCode_InvalidGCode37",
		38: "ErrorCode_InvalidGCode38",
	}
	ErrorCode_value = map[string]int32{
		"ErrorCode_NoError":                 0,
		"ErrorCode_ExpectedCommandLetter":   1,
		"ErrorCode_BadNumberFormat":         2,
		"ErrorCode_InvalidStatement":        3,
		"ErrorCode_NegativeValue":           4,
		"ErrorCode_HomingCycleFailure":      5,
		"ErrorCode_MinStepPulseTime":        6,
		"ErrorCode_EEPROMReadFailure":       7,
		"ErrorCode_NotIdle":                 8,
		"ErrorCode_GCodeLock":               9,
		"ErrorCode_HomingNotEnabled":        10,
		"ErrorCode_LineOverflow":            11,
		"ErrorCode_MaxStepRateExceeded":     12,
		"ErrorCode_SafetyDoorDetected":      13,
		"ErrorCode_LineLengthLimitExceeded": 14,
		"ErrorCode_TravelExceeded":          15,
		"ErrorCode_InvalidJogCommand":       16,
		"ErrorCode_LaserModeRequiresPWM":    17,
		"ErrorCode_UnsupportedCommand":      20,
		"ErrorCode_ModalGroupViolation":     21,
		"ErrorCode_UndefinedFeedRate":       22,
		"ErrorCode_InvalidGCode23":          23,
		"ErrorCode_InvalidGCode24":          24,
		"ErrorCode_InvalidGCode25":          25,
		"ErrorCode_InvalidGCode26":          26,
		"ErrorCode_InvalidGCode27":          27,
		"ErrorCode_InvalidGCode28":          28,
		"ErrorCode_InvalidGCode29":          29,
		"ErrorCode_InvalidGCode30":          30,
		"ErrorCode_InvalidGCode31":          31,
		"ErrorCode_InvalidGCode32":          32,
		"ErrorCode_InvalidGCode33":          33,
		"ErrorCode_InvalidGCode34":          34,
		"ErrorCode_InvalidGCode35":          35,
		"ErrorCode_InvalidGCode36":          36,
		"ErrorCode_InvalidGCode37":          37,
		"ErrorCode_InvalidGCode38":          38,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_grbl_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_grbl_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{2}
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xyz position in mm
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	// xyz position in mm
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	// xyz position in mm
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Position) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type Offsets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// byte value, range 0-255
	Feed *uint32 `protobuf:"varint,1,opt,name=feed,proto3,oneof" json:"feed,omitempty"`
	// byte value, range 0-255
	Rapid *uint32 `protobuf:"varint,2,opt,name=rapid,proto3,oneof" json:"rapid,omitempty"`
	// byte value, range 0-255
	Spindle *uint32 `protobuf:"varint,3,opt,name=spindle,proto3,oneof" json:"spindle,omitempty"`
}

func (x *Offsets) Reset() {
	*x = Offsets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offsets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offsets) ProtoMessage() {}

func (x *Offsets) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offsets.ProtoReflect.Descriptor instead.
func (*Offsets) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{1}
}

func (x *Offsets) GetFeed() uint32 {
	if x != nil && x.Feed != nil {
		return *x.Feed
	}
	return 0
}

func (x *Offsets) GetRapid() uint32 {
	if x != nil && x.Rapid != nil {
		return *x.Rapid
	}
	return 0
}

func (x *Offsets) GetSpindle() uint32 {
	if x != nil && x.Spindle != nil {
		return *x.Spindle
	}
	return 0
}

type Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// alarm code
	Alarm *AlarmCode `protobuf:"varint,1,opt,name=alarm,proto3,enum=AlarmCode,oneof" json:"alarm,omitempty"`
	// alarm message
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Alarm) Reset() {
	*x = Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alarm) ProtoMessage() {}

func (x *Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alarm.ProtoReflect.Descriptor instead.
func (*Alarm) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{2}
}

func (x *Alarm) GetAlarm() AlarmCode {
	if x != nil && x.Alarm != nil {
		return *x.Alarm
	}
	return AlarmCode_AlarmCode_NoAlarm
}

func (x *Alarm) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// error code
	Error *ErrorCode `protobuf:"varint,1,opt,name=error,proto3,enum=ErrorCode,oneof" json:"error,omitempty"`
	// error message
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{3}
}

func (x *Error) GetError() ErrorCode {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ErrorCode_ErrorCode_NoError
}

func (x *Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Position    `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Feed     float32      `protobuf:"fixed32,2,opt,name=feed,proto3" json:"feed,omitempty"`
	Offsets  *Offsets     `protobuf:"bytes,3,opt,name=offsets,proto3,oneof" json:"offsets,omitempty"`
	Alarm    *Alarm       `protobuf:"bytes,4,opt,name=alarm,proto3,oneof" json:"alarm,omitempty"`
	Error    *Error       `protobuf:"bytes,5,opt,name=error,proto3,oneof" json:"error,omitempty"`
	Active   []Peripheral `protobuf:"varint,6,rep,packed,name=active,proto3,enum=Peripheral" json:"active,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{4}
}

func (x *State) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *State) GetFeed() float32 {
	if x != nil {
		return x.Feed
	}
	return 0
}

func (x *State) GetOffsets() *Offsets {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *State) GetAlarm() *Alarm {
	if x != nil {
		return x.Alarm
	}
	return nil
}

func (x *State) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *State) GetActive() []Peripheral {
	if x != nil {
		return x.Active
	}
	return nil
}

type StateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StateStreamRequest) Reset() {
	*x = StateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateStreamRequest) ProtoMessage() {}

func (x *StateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateStreamRequest.ProtoReflect.Descriptor instead.
func (*StateStreamRequest) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{5}
}

type StateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State     *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StateStreamResponse) Reset() {
	*x = StateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateStreamResponse) ProtoMessage() {}

func (x *StateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateStreamResponse.ProtoReflect.Descriptor instead.
func (*StateStreamResponse) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{6}
}

func (x *StateStreamResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *StateStreamResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type HomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Axis:
	//
	//	*HomeRequest_All
	//	*HomeRequest_X
	//	*HomeRequest_Y
	//	*HomeRequest_Z
	Axis isHomeRequest_Axis `protobuf_oneof:"axis"`
}

func (x *HomeRequest) Reset() {
	*x = HomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HomeRequest) ProtoMessage() {}

func (x *HomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HomeRequest.ProtoReflect.Descriptor instead.
func (*HomeRequest) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{7}
}

func (m *HomeRequest) GetAxis() isHomeRequest_Axis {
	if m != nil {
		return m.Axis
	}
	return nil
}

func (x *HomeRequest) GetAll() bool {
	if x, ok := x.GetAxis().(*HomeRequest_All); ok {
		return x.All
	}
	return false
}

func (x *HomeRequest) GetX() bool {
	if x, ok := x.GetAxis().(*HomeRequest_X); ok {
		return x.X
	}
	return false
}

func (x *HomeRequest) GetY() bool {
	if x, ok := x.GetAxis().(*HomeRequest_Y); ok {
		return x.Y
	}
	return false
}

func (x *HomeRequest) GetZ() bool {
	if x, ok := x.GetAxis().(*HomeRequest_Z); ok {
		return x.Z
	}
	return false
}

type isHomeRequest_Axis interface {
	isHomeRequest_Axis()
}

type HomeRequest_All struct {
	All bool `protobuf:"varint,1,opt,name=all,proto3,oneof"`
}

type HomeRequest_X struct {
	X bool `protobuf:"varint,2,opt,name=X,proto3,oneof"`
}

type HomeRequest_Y struct {
	Y bool `protobuf:"varint,3,opt,name=Y,proto3,oneof"`
}

type HomeRequest_Z struct {
	Z bool `protobuf:"varint,4,opt,name=Z,proto3,oneof"`
}

func (*HomeRequest_All) isHomeRequest_Axis() {}

func (*HomeRequest_X) isHomeRequest_Axis() {}

func (*HomeRequest_Y) isHomeRequest_Axis() {}

func (*HomeRequest_Z) isHomeRequest_Axis() {}

type MoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xyz position in mm
	X *float32 `protobuf:"fixed32,1,opt,name=x,proto3,oneof" json:"x,omitempty"`
	// xyz position in mm
	Y *float32 `protobuf:"fixed32,2,opt,name=y,proto3,oneof" json:"y,omitempty"`
	// xyz position in mm
	Z *float32 `protobuf:"fixed32,3,opt,name=z,proto3,oneof" json:"z,omitempty"`
	// speed in mm/min
	Speed *float32 `protobuf:"fixed32,4,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{8}
}

func (x *MoveRequest) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *MoveRequest) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *MoveRequest) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *MoveRequest) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

type MoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MoveResponse) Reset() {
	*x = MoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveResponse) ProtoMessage() {}

func (x *MoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveResponse.ProtoReflect.Descriptor instead.
func (*MoveResponse) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{9}
}

func (x *MoveResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SpindleOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// speed in rpm
	Speed *int32 `protobuf:"varint,1,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
}

func (x *SpindleOnRequest) Reset() {
	*x = SpindleOnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpindleOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpindleOnRequest) ProtoMessage() {}

func (x *SpindleOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpindleOnRequest.ProtoReflect.Descriptor instead.
func (*SpindleOnRequest) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{10}
}

func (x *SpindleOnRequest) GetSpeed() int32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

type SpindleOnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SpindleOnResponse) Reset() {
	*x = SpindleOnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpindleOnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpindleOnResponse) ProtoMessage() {}

func (x *SpindleOnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpindleOnResponse.ProtoReflect.Descriptor instead.
func (*SpindleOnResponse) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{11}
}

func (x *SpindleOnResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SpindleOffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpindleOffRequest) Reset() {
	*x = SpindleOffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpindleOffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpindleOffRequest) ProtoMessage() {}

func (x *SpindleOffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpindleOffRequest.ProtoReflect.Descriptor instead.
func (*SpindleOffRequest) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{12}
}

type SpindleOffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SpindleOffResponse) Reset() {
	*x = SpindleOffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpindleOffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpindleOffResponse) ProtoMessage() {}

func (x *SpindleOffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpindleOffResponse.ProtoReflect.Descriptor instead.
func (*SpindleOffResponse) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{13}
}

func (x *SpindleOffResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MistOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MistOnRequest) Reset() {
	*x = MistOnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistOnRequest) ProtoMessage() {}

func (x *MistOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistOnRequest.ProtoReflect.Descriptor instead.
func (*MistOnRequest) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{14}
}

type MistOnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MistOnResponse) Reset() {
	*x = MistOnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MistOnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MistOnResponse) ProtoMessage() {}

func (x *MistOnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MistOnResponse.ProtoReflect.Descriptor instead.
func (*MistOnResponse) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{15}
}

func (x *MistOnResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// M8 -- switch 10-port rheodyne to position A
type FloodOnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FloodOnRequest) Reset() {
	*x = FloodOnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloodOnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloodOnRequest) ProtoMessage() {}

func (x *FloodOnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloodOnRequest.ProtoReflect.Descriptor instead.
func (*FloodOnRequest) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{16}
}

type FloodOnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *FloodOnResponse) Reset() {
	*x = FloodOnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloodOnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloodOnResponse) ProtoMessage() {}

func (x *FloodOnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloodOnResponse.ProtoReflect.Descriptor instead.
func (*FloodOnResponse) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{17}
}

func (x *FloodOnResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// M9 -- have to call after M7 or M8 to write high to the pins again. The valve is actuated on a falling edge.
type CoolantOffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CoolantOffRequest) Reset() {
	*x = CoolantOffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolantOffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolantOffRequest) ProtoMessage() {}

func (x *CoolantOffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolantOffRequest.ProtoReflect.Descriptor instead.
func (*CoolantOffRequest) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{18}
}

type CoolantOffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CoolantOffResponse) Reset() {
	*x = CoolantOffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoolantOffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoolantOffResponse) ProtoMessage() {}

func (x *CoolantOffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoolantOffResponse.ProtoReflect.Descriptor instead.
func (*CoolantOffResponse) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{19}
}

func (x *CoolantOffResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are assignable to Response:
	//
	//	*Response_State
	//	*Response_Move
	//	*Response_SpindleOn
	//	*Response_SpindleOff
	//	*Response_MistOn
	//	*Response_FloodOn
	//	*Response_CoolantOff
	Response isResponse_Response `protobuf_oneof:"response"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grbl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_grbl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_grbl_proto_rawDescGZIP(), []int{20}
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *Response) GetState() *State {
	if x, ok := x.GetResponse().(*Response_State); ok {
		return x.State
	}
	return nil
}

func (x *Response) GetMove() *MoveResponse {
	if x, ok := x.GetResponse().(*Response_Move); ok {
		return x.Move
	}
	return nil
}

func (x *Response) GetSpindleOn() *SpindleOnResponse {
	if x, ok := x.GetResponse().(*Response_SpindleOn); ok {
		return x.SpindleOn
	}
	return nil
}

func (x *Response) GetSpindleOff() *SpindleOffResponse {
	if x, ok := x.GetResponse().(*Response_SpindleOff); ok {
		return x.SpindleOff
	}
	return nil
}

func (x *Response) GetMistOn() *MistOnResponse {
	if x, ok := x.GetResponse().(*Response_MistOn); ok {
		return x.MistOn
	}
	return nil
}

func (x *Response) GetFloodOn() *FloodOnResponse {
	if x, ok := x.GetResponse().(*Response_FloodOn); ok {
		return x.FloodOn
	}
	return nil
}

func (x *Response) GetCoolantOff() *CoolantOffResponse {
	if x, ok := x.GetResponse().(*Response_CoolantOff); ok {
		return x.CoolantOff
	}
	return nil
}

type isResponse_Response interface {
	isResponse_Response()
}

type Response_State struct {
	State *State `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

type Response_Move struct {
	Move *MoveResponse `protobuf:"bytes,3,opt,name=move,proto3,oneof"`
}

type Response_SpindleOn struct {
	SpindleOn *SpindleOnResponse `protobuf:"bytes,4,opt,name=spindleOn,proto3,oneof"`
}

type Response_SpindleOff struct {
	SpindleOff *SpindleOffResponse `protobuf:"bytes,5,opt,name=spindleOff,proto3,oneof"`
}

type Response_MistOn struct {
	MistOn *MistOnResponse `protobuf:"bytes,6,opt,name=mistOn,proto3,oneof"`
}

type Response_FloodOn struct {
	FloodOn *FloodOnResponse `protobuf:"bytes,7,opt,name=floodOn,proto3,oneof"`
}

type Response_CoolantOff struct {
	CoolantOff *CoolantOffResponse `protobuf:"bytes,8,opt,name=coolantOff,proto3,oneof"`
}

func (*Response_State) isResponse_Response() {}

func (*Response_Move) isResponse_Response() {}

func (*Response_SpindleOn) isResponse_Response() {}

func (*Response_SpindleOff) isResponse_Response() {}

func (*Response_MistOn) isResponse_Response() {}

func (*Response_FloodOn) isResponse_Response() {}

func (*Response_CoolantOff) isResponse_Response() {}

var File_grbl_proto protoreflect.FileDescriptor

var file_grbl_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x67, 0x72, 0x62, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x7a, 0x22, 0x7b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x17, 0x0a,
	0x04, 0x66, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x66,
	0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x61, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x72, 0x61, 0x70, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x07, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61,
	0x70, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x63, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x48, 0x01,
	0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x02, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x59, 0x0a, 0x0b, 0x48,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x0e,
	0x0a, 0x01, 0x58, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x01, 0x58, 0x12, 0x0e,
	0x0a, 0x01, 0x59, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x01, 0x59, 0x12, 0x0e,
	0x0a, 0x01, 0x5a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x01, 0x5a, 0x42, 0x06,
	0x0a, 0x04, 0x61, 0x78, 0x69, 0x73, 0x22, 0x7d, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x11, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x01, 0x78, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x01, 0x79, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x01, 0x7a, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x78, 0x42,
	0x04, 0x0a, 0x02, 0x5f, 0x79, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x7a, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x37, 0x0a, 0x10, 0x53, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x53, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x70, 0x69, 0x6e, 0x64,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12,
	0x53, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0f, 0x0a, 0x0d,
	0x4d, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a,
	0x0e, 0x4d, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6f, 0x6f, 0x6c,
	0x61, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a,
	0x12, 0x43, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf0, 0x02,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x73, 0x70, 0x69,
	0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53,
	0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x6e, 0x12, 0x35, 0x0a,
	0x0a, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x6e, 0x64, 0x6c,
	0x65, 0x4f, 0x66, 0x66, 0x12, 0x29, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x12,
	0x2c, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x12, 0x35, 0x0a,
	0x0a, 0x63, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x6c, 0x61, 0x6e,
	0x74, 0x4f, 0x66, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x38, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x03, 0x2a, 0x87, 0x02, 0x0a, 0x09, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x04, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x32, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69,
	0x6c, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x48, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x32, 0x10, 0x07, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x33, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69,
	0x6c, 0x34, 0x10, 0x09, 0x2a, 0x87, 0x09, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x4e, 0x6f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x42, 0x61, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x45, 0x50, 0x52, 0x4f, 0x4d,
	0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x49, 0x64,
	0x6c, 0x65, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x48, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x61, 0x78, 0x53, 0x74, 0x65, 0x70, 0x52, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x44, 0x6f, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x25,
	0x0a, 0x21, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4a, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x4c, 0x61, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x50, 0x57, 0x4d, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x14, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x15, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x10, 0x16, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x33, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x34, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47,
	0x43, 0x6f, 0x64, 0x65, 0x32, 0x35, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x36, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x37, 0x10, 0x1b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x38,
	0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x39, 0x10, 0x1d,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x33, 0x30, 0x10, 0x1e, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x33, 0x31, 0x10, 0x1f, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x33, 0x32, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47,
	0x43, 0x6f, 0x64, 0x65, 0x33, 0x33, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f,
	0x64, 0x65, 0x33, 0x34, 0x10, 0x22, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65,
	0x33, 0x35, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x33, 0x36,
	0x10, 0x24, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x33, 0x37, 0x10, 0x25,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x43, 0x6f, 0x64, 0x65, 0x33, 0x38, 0x10, 0x26, 0x32, 0xe5,
	0x02, 0x0a, 0x04, 0x47, 0x52, 0x42, 0x4c, 0x12, 0x21, 0x0a, 0x04, 0x48, 0x6f, 0x6d, 0x65, 0x12,
	0x0c, 0x2e, 0x48, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65,
	0x12, 0x0c, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x09, 0x53,
	0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x4f, 0x6e, 0x12, 0x11, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x64,
	0x6c, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x53, 0x70, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x12, 0x12, 0x2e, 0x53, 0x70, 0x69, 0x6e, 0x64, 0x6c, 0x65,
	0x4f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x06, 0x4d, 0x69, 0x73, 0x74, 0x4f,
	0x6e, 0x12, 0x0e, 0x2e, 0x4d, 0x69, 0x73, 0x74, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27,
	0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x12, 0x0f, 0x2e, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x4f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x6c, 0x61,
	0x6e, 0x74, 0x4f, 0x66, 0x66, 0x12, 0x12, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x4f,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x62,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grbl_proto_rawDescOnce sync.Once
	file_grbl_proto_rawDescData = file_grbl_proto_rawDesc
)

func file_grbl_proto_rawDescGZIP() []byte {
	file_grbl_proto_rawDescOnce.Do(func() {
		file_grbl_proto_rawDescData = protoimpl.X.CompressGZIP(file_grbl_proto_rawDescData)
	})
	return file_grbl_proto_rawDescData
}

var file_grbl_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_grbl_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_grbl_proto_goTypes = []interface{}{
	(Peripheral)(0),             // 0: Peripheral
	(AlarmCode)(0),              // 1: AlarmCode
	(ErrorCode)(0),              // 2: ErrorCode
	(*Position)(nil),            // 3: Position
	(*Offsets)(nil),             // 4: Offsets
	(*Alarm)(nil),               // 5: Alarm
	(*Error)(nil),               // 6: Error
	(*State)(nil),               // 7: State
	(*StateStreamRequest)(nil),  // 8: StateStreamRequest
	(*StateStreamResponse)(nil), // 9: StateStreamResponse
	(*HomeRequest)(nil),         // 10: HomeRequest
	(*MoveRequest)(nil),         // 11: MoveRequest
	(*MoveResponse)(nil),        // 12: MoveResponse
	(*SpindleOnRequest)(nil),    // 13: SpindleOnRequest
	(*SpindleOnResponse)(nil),   // 14: SpindleOnResponse
	(*SpindleOffRequest)(nil),   // 15: SpindleOffRequest
	(*SpindleOffResponse)(nil),  // 16: SpindleOffResponse
	(*MistOnRequest)(nil),       // 17: MistOnRequest
	(*MistOnResponse)(nil),      // 18: MistOnResponse
	(*FloodOnRequest)(nil),      // 19: FloodOnRequest
	(*FloodOnResponse)(nil),     // 20: FloodOnResponse
	(*CoolantOffRequest)(nil),   // 21: CoolantOffRequest
	(*CoolantOffResponse)(nil),  // 22: CoolantOffResponse
	(*Response)(nil),            // 23: Response
}
var file_grbl_proto_depIdxs = []int32{
	1,  // 0: Alarm.alarm:type_name -> AlarmCode
	2,  // 1: Error.error:type_name -> ErrorCode
	3,  // 2: State.position:type_name -> Position
	4,  // 3: State.offsets:type_name -> Offsets
	5,  // 4: State.alarm:type_name -> Alarm
	6,  // 5: State.error:type_name -> Error
	0,  // 6: State.active:type_name -> Peripheral
	7,  // 7: StateStreamResponse.state:type_name -> State
	7,  // 8: Response.state:type_name -> State
	12, // 9: Response.move:type_name -> MoveResponse
	14, // 10: Response.spindleOn:type_name -> SpindleOnResponse
	16, // 11: Response.spindleOff:type_name -> SpindleOffResponse
	18, // 12: Response.mistOn:type_name -> MistOnResponse
	20, // 13: Response.floodOn:type_name -> FloodOnResponse
	22, // 14: Response.coolantOff:type_name -> CoolantOffResponse
	10, // 15: GRBL.Home:input_type -> HomeRequest
	8,  // 16: GRBL.StateStream:input_type -> StateStreamRequest
	11, // 17: GRBL.Move:input_type -> MoveRequest
	13, // 18: GRBL.SpindleOn:input_type -> SpindleOnRequest
	15, // 19: GRBL.SpindleOff:input_type -> SpindleOffRequest
	17, // 20: GRBL.MistOn:input_type -> MistOnRequest
	19, // 21: GRBL.FloodOn:input_type -> FloodOnRequest
	21, // 22: GRBL.CoolantOff:input_type -> CoolantOffRequest
	23, // 23: GRBL.Home:output_type -> Response
	9,  // 24: GRBL.StateStream:output_type -> StateStreamResponse
	23, // 25: GRBL.Move:output_type -> Response
	23, // 26: GRBL.SpindleOn:output_type -> Response
	23, // 27: GRBL.SpindleOff:output_type -> Response
	23, // 28: GRBL.MistOn:output_type -> Response
	23, // 29: GRBL.FloodOn:output_type -> Response
	23, // 30: GRBL.CoolantOff:output_type -> Response
	23, // [23:31] is the sub-list for method output_type
	15, // [15:23] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_grbl_proto_init() }
func file_grbl_proto_init() {
	if File_grbl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grbl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offsets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpindleOnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpindleOnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpindleOffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpindleOffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistOnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MistOnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloodOnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloodOnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolantOffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoolantOffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grbl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grbl_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_grbl_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_grbl_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_grbl_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_grbl_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*HomeRequest_All)(nil),
		(*HomeRequest_X)(nil),
		(*HomeRequest_Y)(nil),
		(*HomeRequest_Z)(nil),
	}
	file_grbl_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_grbl_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_grbl_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Response_State)(nil),
		(*Response_Move)(nil),
		(*Response_SpindleOn)(nil),
		(*Response_SpindleOff)(nil),
		(*Response_MistOn)(nil),
		(*Response_FloodOn)(nil),
		(*Response_CoolantOff)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grbl_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grbl_proto_goTypes,
		DependencyIndexes: file_grbl_proto_depIdxs,
		EnumInfos:         file_grbl_proto_enumTypes,
		MessageInfos:      file_grbl_proto_msgTypes,
	}.Build()
	File_grbl_proto = out.File
	file_grbl_proto_rawDesc = nil
	file_grbl_proto_goTypes = nil
	file_grbl_proto_depIdxs = nil
}
