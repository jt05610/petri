// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: v1/marlin.proto

package marlin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarlinClient is the client API for Marlin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarlinClient interface {
	Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*Response, error)
	StateStream(ctx context.Context, in *StateStreamRequest, opts ...grpc.CallOption) (Marlin_StateStreamClient, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*Response, error)
	FanOn(ctx context.Context, in *FanOnRequest, opts ...grpc.CallOption) (*Response, error)
	FanOff(ctx context.Context, in *FanOffRequest, opts ...grpc.CallOption) (*Response, error)
}

type marlinClient struct {
	cc grpc.ClientConnInterface
}

func NewMarlinClient(cc grpc.ClientConnInterface) MarlinClient {
	return &marlinClient{cc}
}

func (c *marlinClient) Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Marlin/Home", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marlinClient) StateStream(ctx context.Context, in *StateStreamRequest, opts ...grpc.CallOption) (Marlin_StateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Marlin_ServiceDesc.Streams[0], "/Marlin/StateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &marlinStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Marlin_StateStreamClient interface {
	Recv() (*StateStreamResponse, error)
	grpc.ClientStream
}

type marlinStateStreamClient struct {
	grpc.ClientStream
}

func (x *marlinStateStreamClient) Recv() (*StateStreamResponse, error) {
	m := new(StateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marlinClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Marlin/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marlinClient) FanOn(ctx context.Context, in *FanOnRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Marlin/FanOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marlinClient) FanOff(ctx context.Context, in *FanOffRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Marlin/FanOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarlinServer is the server API for Marlin service.
// All implementations must embed UnimplementedMarlinServer
// for forward compatibility
type MarlinServer interface {
	Home(context.Context, *HomeRequest) (*Response, error)
	StateStream(*StateStreamRequest, Marlin_StateStreamServer) error
	Move(context.Context, *MoveRequest) (*Response, error)
	FanOn(context.Context, *FanOnRequest) (*Response, error)
	FanOff(context.Context, *FanOffRequest) (*Response, error)
	mustEmbedUnimplementedMarlinServer()
}

// UnimplementedMarlinServer must be embedded to have forward compatible implementations.
type UnimplementedMarlinServer struct {
}

func (UnimplementedMarlinServer) Home(context.Context, *HomeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}
func (UnimplementedMarlinServer) StateStream(*StateStreamRequest, Marlin_StateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StateStream not implemented")
}
func (UnimplementedMarlinServer) Move(context.Context, *MoveRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedMarlinServer) FanOn(context.Context, *FanOnRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FanOn not implemented")
}
func (UnimplementedMarlinServer) FanOff(context.Context, *FanOffRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FanOff not implemented")
}
func (UnimplementedMarlinServer) mustEmbedUnimplementedMarlinServer() {}

// UnsafeMarlinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarlinServer will
// result in compilation errors.
type UnsafeMarlinServer interface {
	mustEmbedUnimplementedMarlinServer()
}

func RegisterMarlinServer(s grpc.ServiceRegistrar, srv MarlinServer) {
	s.RegisterService(&Marlin_ServiceDesc, srv)
}

func _Marlin_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarlinServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marlin/Home",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarlinServer).Home(ctx, req.(*HomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marlin_StateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarlinServer).StateStream(m, &marlinStateStreamServer{stream})
}

type Marlin_StateStreamServer interface {
	Send(*StateStreamResponse) error
	grpc.ServerStream
}

type marlinStateStreamServer struct {
	grpc.ServerStream
}

func (x *marlinStateStreamServer) Send(m *StateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Marlin_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarlinServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marlin/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarlinServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marlin_FanOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarlinServer).FanOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marlin/FanOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarlinServer).FanOn(ctx, req.(*FanOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marlin_FanOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarlinServer).FanOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marlin/FanOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarlinServer).FanOff(ctx, req.(*FanOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Marlin_ServiceDesc is the grpc.ServiceDesc for Marlin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marlin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Marlin",
	HandlerType: (*MarlinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Home",
			Handler:    _Marlin_Home_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Marlin_Move_Handler,
		},
		{
			MethodName: "FanOn",
			Handler:    _Marlin_FanOn_Handler,
		},
		{
			MethodName: "FanOff",
			Handler:    _Marlin_FanOff_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StateStream",
			Handler:       _Marlin_StateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/marlin.proto",
}
