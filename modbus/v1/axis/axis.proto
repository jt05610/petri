syntax = "proto3";

import "v1/modbus/modbus.proto";
import "axis/v1/axis/common.proto";

package modbus_axis;

option go_package = "axis/v1/axis";

message ModbusAxis {
  string id = 1;
  axis.Axis axis = 2;
  string axis_id = 3;
  modbus.RegisterMap register_map = 4;
  string register_map_id = 5;
}
message GetAxisRequest {
  string id = 1;
}

message GetAxisResponse {
  optional ModbusAxis device = 1;
}

message ListAxisResponse {
  repeated ModbusAxis devices = 1;
}

message AddAxisRequest {
  string name = 1;
  int32 unit_id = 2;
  axis.Calibration calibration = 3;
  modbus.RegisterMap register_map = 4;
}

message AddAxisResponse {
  optional ModbusAxis device = 1;
}

message RemoveAxisRequest {
  string id = 1;
}

message RemoveAxisResponse {
  optional ModbusAxis device = 1;
}

message UpdateAxisRequest {
  string id = 1;
  string name = 2;
  axis.Calibration calibration = 3;
  modbus.RegisterMap register_map = 4;
}

message UpdateAxisResponse {
  optional ModbusAxis device = 1;
}

message UpdateNameRequest {
  string id = 1;
  string name = 2;
}

message UpdateNameResponse {
  optional ModbusAxis device = 1;
}

message UpdateCalibrationRequest {
  string id = 1;
  axis.Calibration calibration = 2;
}

message UpdateCalibrationResponse {
  optional modbus_axis.ModbusAxis device = 1;
}

message UpdateRegMapRequest {
  string id = 1;
  modbus.RegisterMap register_map = 2;
}

message UpdateRegMapResponse {
  optional ModbusAxis device = 1;
}

service Store {
  rpc GetAxis(GetAxisRequest) returns (GetAxisResponse);
  rpc ListAxis(axis.Empty) returns (ListAxisResponse);
  rpc AddAxis(AddAxisRequest) returns (AddAxisResponse);
  rpc RemoveAxis(RemoveAxisRequest) returns (RemoveAxisResponse);
  rpc UpdateAxis(UpdateAxisRequest) returns (UpdateAxisResponse);
  rpc UpdateName(UpdateNameRequest) returns (UpdateNameResponse);
  rpc UpdateCalibration(UpdateCalibrationRequest) returns (UpdateCalibrationResponse);
  rpc UpdateRegMap(UpdateRegMapRequest) returns (UpdateRegMapResponse);
}