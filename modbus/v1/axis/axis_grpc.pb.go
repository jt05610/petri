// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: v1/axis/axis.proto

package axis

import (
	context "context"
	axis "core/axis/v1/axis"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	GetAxis(ctx context.Context, in *GetAxisRequest, opts ...grpc.CallOption) (*GetAxisResponse, error)
	ListAxis(ctx context.Context, in *axis.Empty, opts ...grpc.CallOption) (*ListAxisResponse, error)
	AddAxis(ctx context.Context, in *AddAxisRequest, opts ...grpc.CallOption) (*AddAxisResponse, error)
	RemoveAxis(ctx context.Context, in *RemoveAxisRequest, opts ...grpc.CallOption) (*RemoveAxisResponse, error)
	UpdateAxis(ctx context.Context, in *UpdateAxisRequest, opts ...grpc.CallOption) (*UpdateAxisResponse, error)
	UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*UpdateNameResponse, error)
	UpdateCalibration(ctx context.Context, in *UpdateCalibrationRequest, opts ...grpc.CallOption) (*UpdateCalibrationResponse, error)
	UpdateRegMap(ctx context.Context, in *UpdateRegMapRequest, opts ...grpc.CallOption) (*UpdateRegMapResponse, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) GetAxis(ctx context.Context, in *GetAxisRequest, opts ...grpc.CallOption) (*GetAxisResponse, error) {
	out := new(GetAxisResponse)
	err := c.cc.Invoke(ctx, "/modbus_axis.Store/GetAxis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ListAxis(ctx context.Context, in *axis.Empty, opts ...grpc.CallOption) (*ListAxisResponse, error) {
	out := new(ListAxisResponse)
	err := c.cc.Invoke(ctx, "/modbus_axis.Store/ListAxis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) AddAxis(ctx context.Context, in *AddAxisRequest, opts ...grpc.CallOption) (*AddAxisResponse, error) {
	out := new(AddAxisResponse)
	err := c.cc.Invoke(ctx, "/modbus_axis.Store/AddAxis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) RemoveAxis(ctx context.Context, in *RemoveAxisRequest, opts ...grpc.CallOption) (*RemoveAxisResponse, error) {
	out := new(RemoveAxisResponse)
	err := c.cc.Invoke(ctx, "/modbus_axis.Store/RemoveAxis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateAxis(ctx context.Context, in *UpdateAxisRequest, opts ...grpc.CallOption) (*UpdateAxisResponse, error) {
	out := new(UpdateAxisResponse)
	err := c.cc.Invoke(ctx, "/modbus_axis.Store/UpdateAxis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*UpdateNameResponse, error) {
	out := new(UpdateNameResponse)
	err := c.cc.Invoke(ctx, "/modbus_axis.Store/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateCalibration(ctx context.Context, in *UpdateCalibrationRequest, opts ...grpc.CallOption) (*UpdateCalibrationResponse, error) {
	out := new(UpdateCalibrationResponse)
	err := c.cc.Invoke(ctx, "/modbus_axis.Store/UpdateCalibration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateRegMap(ctx context.Context, in *UpdateRegMapRequest, opts ...grpc.CallOption) (*UpdateRegMapResponse, error) {
	out := new(UpdateRegMapResponse)
	err := c.cc.Invoke(ctx, "/modbus_axis.Store/UpdateRegMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	GetAxis(context.Context, *GetAxisRequest) (*GetAxisResponse, error)
	ListAxis(context.Context, *axis.Empty) (*ListAxisResponse, error)
	AddAxis(context.Context, *AddAxisRequest) (*AddAxisResponse, error)
	RemoveAxis(context.Context, *RemoveAxisRequest) (*RemoveAxisResponse, error)
	UpdateAxis(context.Context, *UpdateAxisRequest) (*UpdateAxisResponse, error)
	UpdateName(context.Context, *UpdateNameRequest) (*UpdateNameResponse, error)
	UpdateCalibration(context.Context, *UpdateCalibrationRequest) (*UpdateCalibrationResponse, error)
	UpdateRegMap(context.Context, *UpdateRegMapRequest) (*UpdateRegMapResponse, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) GetAxis(context.Context, *GetAxisRequest) (*GetAxisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAxis not implemented")
}
func (UnimplementedStoreServer) ListAxis(context.Context, *axis.Empty) (*ListAxisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAxis not implemented")
}
func (UnimplementedStoreServer) AddAxis(context.Context, *AddAxisRequest) (*AddAxisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAxis not implemented")
}
func (UnimplementedStoreServer) RemoveAxis(context.Context, *RemoveAxisRequest) (*RemoveAxisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAxis not implemented")
}
func (UnimplementedStoreServer) UpdateAxis(context.Context, *UpdateAxisRequest) (*UpdateAxisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAxis not implemented")
}
func (UnimplementedStoreServer) UpdateName(context.Context, *UpdateNameRequest) (*UpdateNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedStoreServer) UpdateCalibration(context.Context, *UpdateCalibrationRequest) (*UpdateCalibrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCalibration not implemented")
}
func (UnimplementedStoreServer) UpdateRegMap(context.Context, *UpdateRegMapRequest) (*UpdateRegMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegMap not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_GetAxis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAxisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetAxis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_axis.Store/GetAxis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetAxis(ctx, req.(*GetAxisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ListAxis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(axis.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ListAxis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_axis.Store/ListAxis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ListAxis(ctx, req.(*axis.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_AddAxis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAxisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).AddAxis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_axis.Store/AddAxis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).AddAxis(ctx, req.(*AddAxisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_RemoveAxis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAxisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).RemoveAxis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_axis.Store/RemoveAxis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).RemoveAxis(ctx, req.(*RemoveAxisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateAxis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAxisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateAxis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_axis.Store/UpdateAxis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateAxis(ctx, req.(*UpdateAxisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_axis.Store/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateName(ctx, req.(*UpdateNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateCalibration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCalibrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateCalibration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_axis.Store/UpdateCalibration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateCalibration(ctx, req.(*UpdateCalibrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateRegMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateRegMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_axis.Store/UpdateRegMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateRegMap(ctx, req.(*UpdateRegMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modbus_axis.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAxis",
			Handler:    _Store_GetAxis_Handler,
		},
		{
			MethodName: "ListAxis",
			Handler:    _Store_ListAxis_Handler,
		},
		{
			MethodName: "AddAxis",
			Handler:    _Store_AddAxis_Handler,
		},
		{
			MethodName: "RemoveAxis",
			Handler:    _Store_RemoveAxis_Handler,
		},
		{
			MethodName: "UpdateAxis",
			Handler:    _Store_UpdateAxis_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _Store_UpdateName_Handler,
		},
		{
			MethodName: "UpdateCalibration",
			Handler:    _Store_UpdateCalibration_Handler,
		},
		{
			MethodName: "UpdateRegMap",
			Handler:    _Store_UpdateRegMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/axis/axis.proto",
}
