// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: v1/modbus/modbus.proto

package modbus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModbusClient is the client API for Modbus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModbusClient interface {
	ReadCoils(ctx context.Context, in *ReadCoilsRequest, opts ...grpc.CallOption) (*ReadCoilsResponse, error)
	ReadDiscreteInputs(ctx context.Context, in *ReadDiscreteInputsRequest, opts ...grpc.CallOption) (*ReadDiscreteInputsResponse, error)
	ReadHoldingRegisters(ctx context.Context, in *ReadHoldingRegistersRequest, opts ...grpc.CallOption) (*ReadHoldingRegistersResponse, error)
	ReadInputRegisters(ctx context.Context, in *ReadInputRegistersRequest, opts ...grpc.CallOption) (*ReadInputRegistersResponse, error)
	WriteSingleCoil(ctx context.Context, in *WriteSingleCoilRequest, opts ...grpc.CallOption) (*WriteSingleCoilResponse, error)
	WriteSingleRegister(ctx context.Context, in *WriteSingleRegisterRequest, opts ...grpc.CallOption) (*WriteSingleRegisterResponse, error)
}

type modbusClient struct {
	cc grpc.ClientConnInterface
}

func NewModbusClient(cc grpc.ClientConnInterface) ModbusClient {
	return &modbusClient{cc}
}

func (c *modbusClient) ReadCoils(ctx context.Context, in *ReadCoilsRequest, opts ...grpc.CallOption) (*ReadCoilsResponse, error) {
	out := new(ReadCoilsResponse)
	err := c.cc.Invoke(ctx, "/modbus.Modbus/ReadCoils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modbusClient) ReadDiscreteInputs(ctx context.Context, in *ReadDiscreteInputsRequest, opts ...grpc.CallOption) (*ReadDiscreteInputsResponse, error) {
	out := new(ReadDiscreteInputsResponse)
	err := c.cc.Invoke(ctx, "/modbus.Modbus/ReadDiscreteInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modbusClient) ReadHoldingRegisters(ctx context.Context, in *ReadHoldingRegistersRequest, opts ...grpc.CallOption) (*ReadHoldingRegistersResponse, error) {
	out := new(ReadHoldingRegistersResponse)
	err := c.cc.Invoke(ctx, "/modbus.Modbus/ReadHoldingRegisters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modbusClient) ReadInputRegisters(ctx context.Context, in *ReadInputRegistersRequest, opts ...grpc.CallOption) (*ReadInputRegistersResponse, error) {
	out := new(ReadInputRegistersResponse)
	err := c.cc.Invoke(ctx, "/modbus.Modbus/ReadInputRegisters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modbusClient) WriteSingleCoil(ctx context.Context, in *WriteSingleCoilRequest, opts ...grpc.CallOption) (*WriteSingleCoilResponse, error) {
	out := new(WriteSingleCoilResponse)
	err := c.cc.Invoke(ctx, "/modbus.Modbus/WriteSingleCoil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modbusClient) WriteSingleRegister(ctx context.Context, in *WriteSingleRegisterRequest, opts ...grpc.CallOption) (*WriteSingleRegisterResponse, error) {
	out := new(WriteSingleRegisterResponse)
	err := c.cc.Invoke(ctx, "/modbus.Modbus/WriteSingleRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModbusServer is the server API for Modbus service.
// All implementations must embed UnimplementedModbusServer
// for forward compatibility
type ModbusServer interface {
	ReadCoils(context.Context, *ReadCoilsRequest) (*ReadCoilsResponse, error)
	ReadDiscreteInputs(context.Context, *ReadDiscreteInputsRequest) (*ReadDiscreteInputsResponse, error)
	ReadHoldingRegisters(context.Context, *ReadHoldingRegistersRequest) (*ReadHoldingRegistersResponse, error)
	ReadInputRegisters(context.Context, *ReadInputRegistersRequest) (*ReadInputRegistersResponse, error)
	WriteSingleCoil(context.Context, *WriteSingleCoilRequest) (*WriteSingleCoilResponse, error)
	WriteSingleRegister(context.Context, *WriteSingleRegisterRequest) (*WriteSingleRegisterResponse, error)
	mustEmbedUnimplementedModbusServer()
}

// UnimplementedModbusServer must be embedded to have forward compatible implementations.
type UnimplementedModbusServer struct {
}

func (UnimplementedModbusServer) ReadCoils(context.Context, *ReadCoilsRequest) (*ReadCoilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCoils not implemented")
}
func (UnimplementedModbusServer) ReadDiscreteInputs(context.Context, *ReadDiscreteInputsRequest) (*ReadDiscreteInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDiscreteInputs not implemented")
}
func (UnimplementedModbusServer) ReadHoldingRegisters(context.Context, *ReadHoldingRegistersRequest) (*ReadHoldingRegistersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHoldingRegisters not implemented")
}
func (UnimplementedModbusServer) ReadInputRegisters(context.Context, *ReadInputRegistersRequest) (*ReadInputRegistersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadInputRegisters not implemented")
}
func (UnimplementedModbusServer) WriteSingleCoil(context.Context, *WriteSingleCoilRequest) (*WriteSingleCoilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSingleCoil not implemented")
}
func (UnimplementedModbusServer) WriteSingleRegister(context.Context, *WriteSingleRegisterRequest) (*WriteSingleRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSingleRegister not implemented")
}
func (UnimplementedModbusServer) mustEmbedUnimplementedModbusServer() {}

// UnsafeModbusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModbusServer will
// result in compilation errors.
type UnsafeModbusServer interface {
	mustEmbedUnimplementedModbusServer()
}

func RegisterModbusServer(s grpc.ServiceRegistrar, srv ModbusServer) {
	s.RegisterService(&Modbus_ServiceDesc, srv)
}

func _Modbus_ReadCoils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCoilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModbusServer).ReadCoils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.Modbus/ReadCoils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModbusServer).ReadCoils(ctx, req.(*ReadCoilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modbus_ReadDiscreteInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDiscreteInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModbusServer).ReadDiscreteInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.Modbus/ReadDiscreteInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModbusServer).ReadDiscreteInputs(ctx, req.(*ReadDiscreteInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modbus_ReadHoldingRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHoldingRegistersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModbusServer).ReadHoldingRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.Modbus/ReadHoldingRegisters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModbusServer).ReadHoldingRegisters(ctx, req.(*ReadHoldingRegistersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modbus_ReadInputRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadInputRegistersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModbusServer).ReadInputRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.Modbus/ReadInputRegisters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModbusServer).ReadInputRegisters(ctx, req.(*ReadInputRegistersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modbus_WriteSingleCoil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSingleCoilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModbusServer).WriteSingleCoil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.Modbus/WriteSingleCoil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModbusServer).WriteSingleCoil(ctx, req.(*WriteSingleCoilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modbus_WriteSingleRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSingleRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModbusServer).WriteSingleRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus.Modbus/WriteSingleRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModbusServer).WriteSingleRegister(ctx, req.(*WriteSingleRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Modbus_ServiceDesc is the grpc.ServiceDesc for Modbus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Modbus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modbus.Modbus",
	HandlerType: (*ModbusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadCoils",
			Handler:    _Modbus_ReadCoils_Handler,
		},
		{
			MethodName: "ReadDiscreteInputs",
			Handler:    _Modbus_ReadDiscreteInputs_Handler,
		},
		{
			MethodName: "ReadHoldingRegisters",
			Handler:    _Modbus_ReadHoldingRegisters_Handler,
		},
		{
			MethodName: "ReadInputRegisters",
			Handler:    _Modbus_ReadInputRegisters_Handler,
		},
		{
			MethodName: "WriteSingleCoil",
			Handler:    _Modbus_WriteSingleCoil_Handler,
		},
		{
			MethodName: "WriteSingleRegister",
			Handler:    _Modbus_WriteSingleRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/modbus/modbus.proto",
}
