// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.3
// source: v1/sensor/sensor.proto

package sensor

import (
	sensor "core/sensor/v1/sensor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	modbus "modbus/v1/modbus"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModbusSensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensor        *sensor.Sensor      `protobuf:"bytes,1,opt,name=sensor,proto3" json:"sensor,omitempty"`
	SensorId      string              `protobuf:"bytes,2,opt,name=sensor_id,json=sensorId,proto3" json:"sensor_id,omitempty"`
	RegisterMap   *modbus.RegisterMap `protobuf:"bytes,3,opt,name=register_map,json=registerMap,proto3" json:"register_map,omitempty"`
	RegisterMapId string              `protobuf:"bytes,4,opt,name=register_map_id,json=registerMapId,proto3" json:"register_map_id,omitempty"`
	Kind          string              `protobuf:"bytes,5,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ModbusSensor) Reset() {
	*x = ModbusSensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModbusSensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModbusSensor) ProtoMessage() {}

func (x *ModbusSensor) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModbusSensor.ProtoReflect.Descriptor instead.
func (*ModbusSensor) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *ModbusSensor) GetSensor() *sensor.Sensor {
	if x != nil {
		return x.Sensor
	}
	return nil
}

func (x *ModbusSensor) GetSensorId() string {
	if x != nil {
		return x.SensorId
	}
	return ""
}

func (x *ModbusSensor) GetRegisterMap() *modbus.RegisterMap {
	if x != nil {
		return x.RegisterMap
	}
	return nil
}

func (x *ModbusSensor) GetRegisterMapId() string {
	if x != nil {
		return x.RegisterMapId
	}
	return ""
}

func (x *ModbusSensor) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

type GetSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSensorRequest) Reset() {
	*x = GetSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorRequest) ProtoMessage() {}

func (x *GetSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorRequest.ProtoReflect.Descriptor instead.
func (*GetSensorRequest) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *GetSensorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *ModbusSensor `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
}

func (x *GetSensorResponse) Reset() {
	*x = GetSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorResponse) ProtoMessage() {}

func (x *GetSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorResponse.ProtoReflect.Descriptor instead.
func (*GetSensorResponse) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{2}
}

func (x *GetSensorResponse) GetDevice() *ModbusSensor {
	if x != nil {
		return x.Device
	}
	return nil
}

type ListSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*ModbusSensor `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *ListSensorResponse) Reset() {
	*x = ListSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorResponse) ProtoMessage() {}

func (x *ListSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorResponse.ProtoReflect.Descriptor instead.
func (*ListSensorResponse) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{3}
}

func (x *ListSensorResponse) GetDevices() []*ModbusSensor {
	if x != nil {
		return x.Devices
	}
	return nil
}

type AddSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Calibration *sensor.Calibration `protobuf:"bytes,2,opt,name=calibration,proto3" json:"calibration,omitempty"`
	RegisterMap *modbus.RegisterMap `protobuf:"bytes,3,opt,name=register_map,json=registerMap,proto3" json:"register_map,omitempty"`
}

func (x *AddSensorRequest) Reset() {
	*x = AddSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSensorRequest) ProtoMessage() {}

func (x *AddSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSensorRequest.ProtoReflect.Descriptor instead.
func (*AddSensorRequest) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{4}
}

func (x *AddSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddSensorRequest) GetCalibration() *sensor.Calibration {
	if x != nil {
		return x.Calibration
	}
	return nil
}

func (x *AddSensorRequest) GetRegisterMap() *modbus.RegisterMap {
	if x != nil {
		return x.RegisterMap
	}
	return nil
}

type AddSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *ModbusSensor `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
}

func (x *AddSensorResponse) Reset() {
	*x = AddSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSensorResponse) ProtoMessage() {}

func (x *AddSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSensorResponse.ProtoReflect.Descriptor instead.
func (*AddSensorResponse) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{5}
}

func (x *AddSensorResponse) GetDevice() *ModbusSensor {
	if x != nil {
		return x.Device
	}
	return nil
}

type RemoveSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveSensorRequest) Reset() {
	*x = RemoveSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSensorRequest) ProtoMessage() {}

func (x *RemoveSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSensorRequest.ProtoReflect.Descriptor instead.
func (*RemoveSensorRequest) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveSensorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *ModbusSensor `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
}

func (x *RemoveSensorResponse) Reset() {
	*x = RemoveSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSensorResponse) ProtoMessage() {}

func (x *RemoveSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSensorResponse.ProtoReflect.Descriptor instead.
func (*RemoveSensorResponse) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveSensorResponse) GetDevice() *ModbusSensor {
	if x != nil {
		return x.Device
	}
	return nil
}

type UpdateSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Calibration *sensor.Calibration `protobuf:"bytes,3,opt,name=calibration,proto3" json:"calibration,omitempty"`
	RegisterMap *modbus.RegisterMap `protobuf:"bytes,4,opt,name=register_map,json=registerMap,proto3" json:"register_map,omitempty"`
}

func (x *UpdateSensorRequest) Reset() {
	*x = UpdateSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSensorRequest) ProtoMessage() {}

func (x *UpdateSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSensorRequest.ProtoReflect.Descriptor instead.
func (*UpdateSensorRequest) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSensorRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSensorRequest) GetCalibration() *sensor.Calibration {
	if x != nil {
		return x.Calibration
	}
	return nil
}

func (x *UpdateSensorRequest) GetRegisterMap() *modbus.RegisterMap {
	if x != nil {
		return x.RegisterMap
	}
	return nil
}

type UpdateSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *ModbusSensor `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
}

func (x *UpdateSensorResponse) Reset() {
	*x = UpdateSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSensorResponse) ProtoMessage() {}

func (x *UpdateSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSensorResponse.ProtoReflect.Descriptor instead.
func (*UpdateSensorResponse) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateSensorResponse) GetDevice() *ModbusSensor {
	if x != nil {
		return x.Device
	}
	return nil
}

type UpdateNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateNameRequest) Reset() {
	*x = UpdateNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNameRequest) ProtoMessage() {}

func (x *UpdateNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateNameRequest) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateNameRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *ModbusSensor `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
}

func (x *UpdateNameResponse) Reset() {
	*x = UpdateNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNameResponse) ProtoMessage() {}

func (x *UpdateNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNameResponse.ProtoReflect.Descriptor instead.
func (*UpdateNameResponse) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateNameResponse) GetDevice() *ModbusSensor {
	if x != nil {
		return x.Device
	}
	return nil
}

type UpdateCalibrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Calibration *sensor.Calibration `protobuf:"bytes,2,opt,name=calibration,proto3" json:"calibration,omitempty"`
}

func (x *UpdateCalibrationRequest) Reset() {
	*x = UpdateCalibrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCalibrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalibrationRequest) ProtoMessage() {}

func (x *UpdateCalibrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalibrationRequest.ProtoReflect.Descriptor instead.
func (*UpdateCalibrationRequest) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCalibrationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCalibrationRequest) GetCalibration() *sensor.Calibration {
	if x != nil {
		return x.Calibration
	}
	return nil
}

type UpdateCalibrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *ModbusSensor `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
}

func (x *UpdateCalibrationResponse) Reset() {
	*x = UpdateCalibrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCalibrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalibrationResponse) ProtoMessage() {}

func (x *UpdateCalibrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalibrationResponse.ProtoReflect.Descriptor instead.
func (*UpdateCalibrationResponse) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCalibrationResponse) GetDevice() *ModbusSensor {
	if x != nil {
		return x.Device
	}
	return nil
}

type UpdateRegMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegisterMap *modbus.RegisterMap `protobuf:"bytes,2,opt,name=register_map,json=registerMap,proto3" json:"register_map,omitempty"`
}

func (x *UpdateRegMapRequest) Reset() {
	*x = UpdateRegMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegMapRequest) ProtoMessage() {}

func (x *UpdateRegMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegMapRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegMapRequest) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateRegMapRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRegMapRequest) GetRegisterMap() *modbus.RegisterMap {
	if x != nil {
		return x.RegisterMap
	}
	return nil
}

type UpdateRegMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *ModbusSensor `protobuf:"bytes,1,opt,name=device,proto3,oneof" json:"device,omitempty"`
}

func (x *UpdateRegMapResponse) Reset() {
	*x = UpdateRegMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_sensor_sensor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegMapResponse) ProtoMessage() {}

func (x *UpdateRegMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_sensor_sensor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegMapResponse.ProtoReflect.Descriptor instead.
func (*UpdateRegMapResponse) Descriptor() ([]byte, []int) {
	return file_v1_sensor_sensor_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateRegMapResponse) GetDevice() *ModbusSensor {
	if x != nil {
		return x.Device
	}
	return nil
}

var File_v1_sensor_sensor_proto protoreflect.FileDescriptor

var file_v1_sensor_sensor_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x16, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x62,
	0x75, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7,
	0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64,
	0x62, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x4d, 0x6f,
	0x64, 0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x62,
	0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x22, 0x58, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2e, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x14,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x22, 0x5b, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x64,
	0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x37, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2e, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x22, 0x5b, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x32, 0xad, 0x05, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0d,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x1f, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x62,
	0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x64,
	0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x22, 0x2e,
	0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x62, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x12, 0x5a, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_v1_sensor_sensor_proto_rawDescOnce sync.Once
	file_v1_sensor_sensor_proto_rawDescData = file_v1_sensor_sensor_proto_rawDesc
)

func file_v1_sensor_sensor_proto_rawDescGZIP() []byte {
	file_v1_sensor_sensor_proto_rawDescOnce.Do(func() {
		file_v1_sensor_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_sensor_sensor_proto_rawDescData)
	})
	return file_v1_sensor_sensor_proto_rawDescData
}

var file_v1_sensor_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_v1_sensor_sensor_proto_goTypes = []interface{}{
	(*ModbusSensor)(nil),              // 0: modbus_sensor.ModbusSensor
	(*GetSensorRequest)(nil),          // 1: modbus_sensor.GetSensorRequest
	(*GetSensorResponse)(nil),         // 2: modbus_sensor.GetSensorResponse
	(*ListSensorResponse)(nil),        // 3: modbus_sensor.ListSensorResponse
	(*AddSensorRequest)(nil),          // 4: modbus_sensor.AddSensorRequest
	(*AddSensorResponse)(nil),         // 5: modbus_sensor.AddSensorResponse
	(*RemoveSensorRequest)(nil),       // 6: modbus_sensor.RemoveSensorRequest
	(*RemoveSensorResponse)(nil),      // 7: modbus_sensor.RemoveSensorResponse
	(*UpdateSensorRequest)(nil),       // 8: modbus_sensor.UpdateSensorRequest
	(*UpdateSensorResponse)(nil),      // 9: modbus_sensor.UpdateSensorResponse
	(*UpdateNameRequest)(nil),         // 10: modbus_sensor.UpdateNameRequest
	(*UpdateNameResponse)(nil),        // 11: modbus_sensor.UpdateNameResponse
	(*UpdateCalibrationRequest)(nil),  // 12: modbus_sensor.UpdateCalibrationRequest
	(*UpdateCalibrationResponse)(nil), // 13: modbus_sensor.UpdateCalibrationResponse
	(*UpdateRegMapRequest)(nil),       // 14: modbus_sensor.UpdateRegMapRequest
	(*UpdateRegMapResponse)(nil),      // 15: modbus_sensor.UpdateRegMapResponse
	(*sensor.Sensor)(nil),             // 16: sensor.Sensor
	(*modbus.RegisterMap)(nil),        // 17: modbus.RegisterMap
	(*sensor.Calibration)(nil),        // 18: sensor.Calibration
	(*sensor.Empty)(nil),              // 19: sensor.Empty
}
var file_v1_sensor_sensor_proto_depIdxs = []int32{
	16, // 0: modbus_sensor.ModbusSensor.sensor:type_name -> sensor.Sensor
	17, // 1: modbus_sensor.ModbusSensor.register_map:type_name -> modbus.RegisterMap
	0,  // 2: modbus_sensor.GetSensorResponse.device:type_name -> modbus_sensor.ModbusSensor
	0,  // 3: modbus_sensor.ListSensorResponse.devices:type_name -> modbus_sensor.ModbusSensor
	18, // 4: modbus_sensor.AddSensorRequest.calibration:type_name -> sensor.Calibration
	17, // 5: modbus_sensor.AddSensorRequest.register_map:type_name -> modbus.RegisterMap
	0,  // 6: modbus_sensor.AddSensorResponse.device:type_name -> modbus_sensor.ModbusSensor
	0,  // 7: modbus_sensor.RemoveSensorResponse.device:type_name -> modbus_sensor.ModbusSensor
	18, // 8: modbus_sensor.UpdateSensorRequest.calibration:type_name -> sensor.Calibration
	17, // 9: modbus_sensor.UpdateSensorRequest.register_map:type_name -> modbus.RegisterMap
	0,  // 10: modbus_sensor.UpdateSensorResponse.device:type_name -> modbus_sensor.ModbusSensor
	0,  // 11: modbus_sensor.UpdateNameResponse.device:type_name -> modbus_sensor.ModbusSensor
	18, // 12: modbus_sensor.UpdateCalibrationRequest.calibration:type_name -> sensor.Calibration
	0,  // 13: modbus_sensor.UpdateCalibrationResponse.device:type_name -> modbus_sensor.ModbusSensor
	17, // 14: modbus_sensor.UpdateRegMapRequest.register_map:type_name -> modbus.RegisterMap
	0,  // 15: modbus_sensor.UpdateRegMapResponse.device:type_name -> modbus_sensor.ModbusSensor
	1,  // 16: modbus_sensor.Store.GetSensor:input_type -> modbus_sensor.GetSensorRequest
	19, // 17: modbus_sensor.Store.ListSensor:input_type -> sensor.Empty
	4,  // 18: modbus_sensor.Store.AddSensor:input_type -> modbus_sensor.AddSensorRequest
	6,  // 19: modbus_sensor.Store.RemoveSensor:input_type -> modbus_sensor.RemoveSensorRequest
	8,  // 20: modbus_sensor.Store.UpdateSensor:input_type -> modbus_sensor.UpdateSensorRequest
	10, // 21: modbus_sensor.Store.UpdateName:input_type -> modbus_sensor.UpdateNameRequest
	12, // 22: modbus_sensor.Store.UpdateCalibration:input_type -> modbus_sensor.UpdateCalibrationRequest
	14, // 23: modbus_sensor.Store.UpdateRegMap:input_type -> modbus_sensor.UpdateRegMapRequest
	2,  // 24: modbus_sensor.Store.GetSensor:output_type -> modbus_sensor.GetSensorResponse
	3,  // 25: modbus_sensor.Store.ListSensor:output_type -> modbus_sensor.ListSensorResponse
	5,  // 26: modbus_sensor.Store.AddSensor:output_type -> modbus_sensor.AddSensorResponse
	7,  // 27: modbus_sensor.Store.RemoveSensor:output_type -> modbus_sensor.RemoveSensorResponse
	9,  // 28: modbus_sensor.Store.UpdateSensor:output_type -> modbus_sensor.UpdateSensorResponse
	11, // 29: modbus_sensor.Store.UpdateName:output_type -> modbus_sensor.UpdateNameResponse
	13, // 30: modbus_sensor.Store.UpdateCalibration:output_type -> modbus_sensor.UpdateCalibrationResponse
	15, // 31: modbus_sensor.Store.UpdateRegMap:output_type -> modbus_sensor.UpdateRegMapResponse
	24, // [24:32] is the sub-list for method output_type
	16, // [16:24] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_v1_sensor_sensor_proto_init() }
func file_v1_sensor_sensor_proto_init() {
	if File_v1_sensor_sensor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_sensor_sensor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModbusSensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCalibrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCalibrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_sensor_sensor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_sensor_sensor_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_v1_sensor_sensor_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_v1_sensor_sensor_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_v1_sensor_sensor_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_v1_sensor_sensor_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_v1_sensor_sensor_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_v1_sensor_sensor_proto_msgTypes[15].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_sensor_sensor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_sensor_sensor_proto_goTypes,
		DependencyIndexes: file_v1_sensor_sensor_proto_depIdxs,
		MessageInfos:      file_v1_sensor_sensor_proto_msgTypes,
	}.Build()
	File_v1_sensor_sensor_proto = out.File
	file_v1_sensor_sensor_proto_rawDesc = nil
	file_v1_sensor_sensor_proto_goTypes = nil
	file_v1_sensor_sensor_proto_depIdxs = nil
}
