// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: v1/sensor/sensor.proto

package sensor

import (
	context "context"
	sensor "core/sensor/v1/sensor"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	GetSensor(ctx context.Context, in *GetSensorRequest, opts ...grpc.CallOption) (*GetSensorResponse, error)
	ListSensor(ctx context.Context, in *sensor.Empty, opts ...grpc.CallOption) (*ListSensorResponse, error)
	AddSensor(ctx context.Context, in *AddSensorRequest, opts ...grpc.CallOption) (*AddSensorResponse, error)
	RemoveSensor(ctx context.Context, in *RemoveSensorRequest, opts ...grpc.CallOption) (*RemoveSensorResponse, error)
	UpdateSensor(ctx context.Context, in *UpdateSensorRequest, opts ...grpc.CallOption) (*UpdateSensorResponse, error)
	UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*UpdateNameResponse, error)
	UpdateCalibration(ctx context.Context, in *UpdateCalibrationRequest, opts ...grpc.CallOption) (*UpdateCalibrationResponse, error)
	UpdateRegMap(ctx context.Context, in *UpdateRegMapRequest, opts ...grpc.CallOption) (*UpdateRegMapResponse, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) GetSensor(ctx context.Context, in *GetSensorRequest, opts ...grpc.CallOption) (*GetSensorResponse, error) {
	out := new(GetSensorResponse)
	err := c.cc.Invoke(ctx, "/modbus_sensor.Store/GetSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) ListSensor(ctx context.Context, in *sensor.Empty, opts ...grpc.CallOption) (*ListSensorResponse, error) {
	out := new(ListSensorResponse)
	err := c.cc.Invoke(ctx, "/modbus_sensor.Store/ListSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) AddSensor(ctx context.Context, in *AddSensorRequest, opts ...grpc.CallOption) (*AddSensorResponse, error) {
	out := new(AddSensorResponse)
	err := c.cc.Invoke(ctx, "/modbus_sensor.Store/AddSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) RemoveSensor(ctx context.Context, in *RemoveSensorRequest, opts ...grpc.CallOption) (*RemoveSensorResponse, error) {
	out := new(RemoveSensorResponse)
	err := c.cc.Invoke(ctx, "/modbus_sensor.Store/RemoveSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateSensor(ctx context.Context, in *UpdateSensorRequest, opts ...grpc.CallOption) (*UpdateSensorResponse, error) {
	out := new(UpdateSensorResponse)
	err := c.cc.Invoke(ctx, "/modbus_sensor.Store/UpdateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*UpdateNameResponse, error) {
	out := new(UpdateNameResponse)
	err := c.cc.Invoke(ctx, "/modbus_sensor.Store/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateCalibration(ctx context.Context, in *UpdateCalibrationRequest, opts ...grpc.CallOption) (*UpdateCalibrationResponse, error) {
	out := new(UpdateCalibrationResponse)
	err := c.cc.Invoke(ctx, "/modbus_sensor.Store/UpdateCalibration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) UpdateRegMap(ctx context.Context, in *UpdateRegMapRequest, opts ...grpc.CallOption) (*UpdateRegMapResponse, error) {
	out := new(UpdateRegMapResponse)
	err := c.cc.Invoke(ctx, "/modbus_sensor.Store/UpdateRegMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	GetSensor(context.Context, *GetSensorRequest) (*GetSensorResponse, error)
	ListSensor(context.Context, *sensor.Empty) (*ListSensorResponse, error)
	AddSensor(context.Context, *AddSensorRequest) (*AddSensorResponse, error)
	RemoveSensor(context.Context, *RemoveSensorRequest) (*RemoveSensorResponse, error)
	UpdateSensor(context.Context, *UpdateSensorRequest) (*UpdateSensorResponse, error)
	UpdateName(context.Context, *UpdateNameRequest) (*UpdateNameResponse, error)
	UpdateCalibration(context.Context, *UpdateCalibrationRequest) (*UpdateCalibrationResponse, error)
	UpdateRegMap(context.Context, *UpdateRegMapRequest) (*UpdateRegMapResponse, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) GetSensor(context.Context, *GetSensorRequest) (*GetSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensor not implemented")
}
func (UnimplementedStoreServer) ListSensor(context.Context, *sensor.Empty) (*ListSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSensor not implemented")
}
func (UnimplementedStoreServer) AddSensor(context.Context, *AddSensorRequest) (*AddSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSensor not implemented")
}
func (UnimplementedStoreServer) RemoveSensor(context.Context, *RemoveSensorRequest) (*RemoveSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSensor not implemented")
}
func (UnimplementedStoreServer) UpdateSensor(context.Context, *UpdateSensorRequest) (*UpdateSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensor not implemented")
}
func (UnimplementedStoreServer) UpdateName(context.Context, *UpdateNameRequest) (*UpdateNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedStoreServer) UpdateCalibration(context.Context, *UpdateCalibrationRequest) (*UpdateCalibrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCalibration not implemented")
}
func (UnimplementedStoreServer) UpdateRegMap(context.Context, *UpdateRegMapRequest) (*UpdateRegMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegMap not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_GetSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).GetSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_sensor.Store/GetSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).GetSensor(ctx, req.(*GetSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_ListSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sensor.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).ListSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_sensor.Store/ListSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).ListSensor(ctx, req.(*sensor.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_AddSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).AddSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_sensor.Store/AddSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).AddSensor(ctx, req.(*AddSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_RemoveSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).RemoveSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_sensor.Store/RemoveSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).RemoveSensor(ctx, req.(*RemoveSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_sensor.Store/UpdateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateSensor(ctx, req.(*UpdateSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_sensor.Store/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateName(ctx, req.(*UpdateNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateCalibration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCalibrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateCalibration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_sensor.Store/UpdateCalibration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateCalibration(ctx, req.(*UpdateCalibrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_UpdateRegMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).UpdateRegMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/modbus_sensor.Store/UpdateRegMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).UpdateRegMap(ctx, req.(*UpdateRegMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "modbus_sensor.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSensor",
			Handler:    _Store_GetSensor_Handler,
		},
		{
			MethodName: "ListSensor",
			Handler:    _Store_ListSensor_Handler,
		},
		{
			MethodName: "AddSensor",
			Handler:    _Store_AddSensor_Handler,
		},
		{
			MethodName: "RemoveSensor",
			Handler:    _Store_RemoveSensor_Handler,
		},
		{
			MethodName: "UpdateSensor",
			Handler:    _Store_UpdateSensor_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _Store_UpdateName_Handler,
		},
		{
			MethodName: "UpdateCalibration",
			Handler:    _Store_UpdateCalibration_Handler,
		},
		{
			MethodName: "UpdateRegMap",
			Handler:    _Store_UpdateRegMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/sensor/sensor.proto",
}
