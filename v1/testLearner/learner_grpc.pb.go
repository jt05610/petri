// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: learner.proto

package learner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LearnerServiceClient is the client API for LearnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearnerServiceClient interface {
	Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompleteResponse, error)
	Learn(ctx context.Context, in *LearnRequest, opts ...grpc.CallOption) (*LearnResponse, error)
}

type learnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearnerServiceClient(cc grpc.ClientConnInterface) LearnerServiceClient {
	return &learnerServiceClient{cc}
}

func (c *learnerServiceClient) Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompleteResponse, error) {
	out := new(CompleteResponse)
	err := c.cc.Invoke(ctx, "/learner.LearnerService/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learnerServiceClient) Learn(ctx context.Context, in *LearnRequest, opts ...grpc.CallOption) (*LearnResponse, error) {
	out := new(LearnResponse)
	err := c.cc.Invoke(ctx, "/learner.LearnerService/Learn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearnerServiceServer is the server API for LearnerService service.
// All implementations must embed UnimplementedLearnerServiceServer
// for forward compatibility
type LearnerServiceServer interface {
	Complete(context.Context, *CompleteRequest) (*CompleteResponse, error)
	Learn(context.Context, *LearnRequest) (*LearnResponse, error)
	mustEmbedUnimplementedLearnerServiceServer()
}

// UnimplementedLearnerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLearnerServiceServer struct {
}

func (UnimplementedLearnerServiceServer) Complete(context.Context, *CompleteRequest) (*CompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedLearnerServiceServer) Learn(context.Context, *LearnRequest) (*LearnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Learn not implemented")
}
func (UnimplementedLearnerServiceServer) mustEmbedUnimplementedLearnerServiceServer() {}

// UnsafeLearnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearnerServiceServer will
// result in compilation errors.
type UnsafeLearnerServiceServer interface {
	mustEmbedUnimplementedLearnerServiceServer()
}

func RegisterLearnerServiceServer(s grpc.ServiceRegistrar, srv LearnerServiceServer) {
	s.RegisterService(&LearnerService_ServiceDesc, srv)
}

func _LearnerService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnerServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learner.LearnerService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnerServiceServer).Complete(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearnerService_Learn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearnerServiceServer).Learn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learner.LearnerService/Learn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearnerServiceServer).Learn(ctx, req.(*LearnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearnerService_ServiceDesc is the grpc.ServiceDesc for LearnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "learner.LearnerService",
	HandlerType: (*LearnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Complete",
			Handler:    _LearnerService_Complete_Handler,
		},
		{
			MethodName: "Learn",
			Handler:    _LearnerService_Learn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "learner.proto",
}
